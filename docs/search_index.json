[["index.html", "CBW pathways Workshops - example R notebooks Chapter 1 Index", " CBW pathways Workshops - example R notebooks Ruth Isserlin 2023-05-09 Chapter 1 Index "],["intro.html", "Chapter 2 CBW Workshop example R Notebooks", " Chapter 2 CBW Workshop example R Notebooks Do you want to run the pathways and network analysis from R instead of doing everything mannually as demonstrated in the workshop? Everything (almost!) that was discussed in the lectures and practicals can be done computationally through R. We are using the bookdown package (Xie 2023) in this Workshop R Notebooks book, which was built on top of R Markdown and knitr (Xie 2015). References "],["setup.html", "Chapter 3 Setup 3.1 Install R and RStudio 3.2 Docker [Optional] 3.3 Install Docker", " Chapter 3 Setup 3.1 Install R and RStudio As with many open source projects, R is a constantly evolving language with regular updates. There is a major release once a year with patch releases through out the year. Often scripts and packages will work from one release to the next (ignoring pesky warnings that a package was compiled on a previous version of R is common) but there are exceptions. Some newer packages will only work on the latest version of R so sometimes the choice of upgrading or not using a new package might present themselves. Often, the amount of packages and work that is need to upgrade is not realized until the process has begun. This is where docker demonstrates it most valuable features. You can create a new instance based on the latest release of R and all your needed packages without having to change any of your current settings. In order to use these notebooks supplied here you need to have: R installed on your computer and a list of packages. (including BiocManager, BiomaRt, gprofiler2, GSA) Each notebook in this set will check for the required packages and install them if they are missing so at the base level you need to just have R installed. There are many different ways you can use and setup R. By simply installing R you can use it directly but it is highly recommended that you also install and use RStudio which is an Integrate development environment (IDE) for R. You cannot just download RStudio and use it. It requires an installation of R. You don’t need to install R and RStudio though. You can also use R and RStudio through docker. I highly recommend using docker instead 3.2 Docker [Optional] Changing versions and environments are a continuing struggle with bioinformatics pipelines and computational pipelines in general. An analysis written and performed a year ago might not run or produce the same results when it is run today. Recording package and system versions or not updating certain packages rarely work in the long run. One the best solutions to reproducibility issues is containing your workflow or pipeline in its own coding environment where everything from the operating system, programs and packages are defined and can be built from a set of given instructions. There are many systems that offer this type of control including: Docker. Singularity “A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another.” (“What Is a Container?” n.d.) Why are containers great for Bioiformatics? allows you to create environments to run bioinformatis pipelines. create a consistent environment to use for your pipelines. test modifications to the pipeline without disrupting your current set up. Coming back to an analysis years later and there is no need to install older versions of packages or programming languages. Simply create a container and re-run. 3.3 Install Docker Download and install docker desktop. Follow slightly different instructions for Windows or MacOS/Linux 3.3.1 Windows it might prompt you to install additional updates (for example - https://docs.Microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package) and require multiple restarts of your system or docker. launch docker desktop app. Open windows Power shell navigate to directory on your system where you plan on keeping all your code. For example: C:\\USERS\\risserlin\\cbw_workshop_code Run the following command: (the only difference with the windows command is the way the current directory is written. ${PWD} instead of \"$(pwd)\") docker run -e PASSWORD=changeit --rm \\ -v ${PWD}:/home/rstudio/projects -p 8787:8787 \\ risserlin/workshop_base_image Windows defender firewall might pop up with warning. Click on Allow access. In docker desktop you see all containers you are running and easily manage them. 3.3.2 MacOS / Linux Open Terminal navigate to directory on your system where you plan on keeping all your code. For example: /Users/risserlin/bcb420_code Run the following command: (the only difference with the windows command is the way the current directory is written. ${PWD} instead of \"$(pwd)\") docker run -e PASSWORD=changeit --rm \\ -v &quot;$(pwd)&quot;:/home/rstudio/projects -p 8787:8787 \\ --add-host &quot;localhost:My.IP.address&quot; risserlin/workshop_base_image References "],["run-gprofiler-from-r.html", "Chapter 4 Run g:profiler from R 4.1 Initialize variables and libraries 4.2 Load in Query set 4.3 Run g:profiler with supplied genesets 4.4 Download and load g:profiler geneset file 4.5 Filter results by geneset size 4.6 Create an output file of the results - Generic enrichment Map file from g:profiler gmt 4.7 Run g:profiler with your own genesets (example using BaderLab genesets) 4.8 Download and load Bader lab geneset file 4.9 Filter Bader lab geneset file 4.10 Upload the gmt files to gprofiler 4.11 Create an output file of the results - Generic enrichment Map file from Baderlab gmt", " Chapter 4 Run g:profiler from R 4.1 Initialize variables and libraries Detailed instructions on how to run g:Profiler programmatically from R The parameters are set manually here but if you want to run the script from the command line then you can update the notebook to pull the parameters from the command line given arguments by updating each variable below to pull the values from the paramters - for example: variable &lt;- params$parameter_name For more details see - defining and using parameters and Knitting with parameters #where to put all the generated files working_dir &lt;- &quot;./generated_data/g_profiler&quot; # where to find the data files needed to run the analysis data_dir &lt;- &quot;./data&quot; # File name containing the list of genes to be used for analysis genelist_file &lt;- &quot;Supplementary_Table1_Cancer_drivers.txt&quot; # default max size of the genesets for example - 250. For this example we # will be varying this parameter max_gs_size &lt;- 250 # default min size of the genesets for example - 3 min_gs_size &lt;- 3 #min intersection between your genelist and the geneset - for example 3 min_intersection &lt;- 3 # organism parameter used for g:profiler. # First letter of first word in species name followed by # the second word for example - hsapiens organism &lt;- &quot;hsapiens&quot; #set the gmt file you want to use if you don&#39;t want to use the latest gmt file. # For example, if you set dest_gmt_file ==&quot;&quot; the below script will automatically # download the latest gmt file from baderlab webstie. If it is set then it # will use the file specified. dest_gmt_file = file.path(working_dir, &quot;Human_GOBP_AllPathways_no_GO_iea_April_02_2023_symbol.gmt&quot;) #use library tryCatch(expr = { library(&quot;gprofiler2&quot;)}, error = function(e) { install.packages(&quot;gprofiler2&quot;)}, finally = library(&quot;gprofiler2&quot;)) tryCatch(expr = { library(&quot;GSA&quot;)}, error = function(e) { install.packages(&quot;GSA&quot;)}, finally = library(&quot;GSA&quot;)) Create or set a directory to store all the generatd results if(!dir.exists(params$working_dir)){ dir.create(params$working_dir) } 4.2 Load in Query set Load in the set of genes that we will be running g:profiler with #load in the file current_genelist &lt;- read.table(file = file.path(data_dir, genelist_file), header = FALSE, sep = &quot;\\t&quot;, quote = &quot;&quot;, stringsAsFactors = FALSE) query_set &lt;- current_genelist$V1 With regards to pathway sets there are two options when using g:Profiler - Use the genesets that are supplied by g:Profiler Upload your own genesets. The most common reasons for supplying your own genesets is the ability to use up to date annotations or in-house annotations that might not be available in the public sphere yet. One of the greatest features of g:Profiler is that it is updated on a regular basis and most of the previous versions are available online ont the gprofiler archive. The gprofielr2 -g:Profiler R implementation is a wrapper for the web version. You require an internet connection to get enrichment results. 4.3 Run g:profiler with supplied genesets For detailed descriptions of all the parameters that can be specified for the gost g:profiler function see -here For this query we are specifying - query - the set of genes of interest, as loaded in from the Supplementary_Table1_Cancer_drivers.txt file. significant - set to FALSE because we want g:Profiler to return all the results not just the ones that it deems significant by its perdetermined threshold. ordered_query - set to TRUE because for this set of genes they are ordered in order of their significance correction_method - set to fdr. by default g:Profiler uses g:Scs organism - set to “hsapiens” for homo sapiens. Organism names are constructed by concatenating the first letter of the name and the family name (according to gprofiler2 documentation) source - the geneset source databases to use for the analysis. We recommend using GO biological process (GO:BP), WikiPathways (WP) and Reactome (Reac) but there are additional sources you can add (GO molecular function or cellular component(GO:MF, GO:CC), KEGG, transcription factors (TF), microRNA targets (MIRNA), corum complexes (CORUM), Human protein atlas (HPA),Human phenotype ontology (HP) ) gprofiler_results &lt;- gost(query = query_set , significant=FALSE, ordered_query = FALSE, exclude_iea=TRUE, correction_method = &quot;fdr&quot;, organism = organism, source = c(&quot;REAC&quot;,&quot;WP&quot;,&quot;GO:BP&quot;)) #get the gprofiler results table enrichment_results &lt;- gprofiler_results$result enrichment_results[1:5,] ## query significant p_value term_size query_size intersection_size ## 1 query_1 TRUE 5.648621e-33 4862 118 101 ## 2 query_1 TRUE 1.995252e-30 4959 118 99 ## 3 query_1 TRUE 1.995252e-30 5093 118 100 ## 4 query_1 TRUE 5.612481e-29 5440 118 101 ## 5 query_1 TRUE 6.150483e-29 5908 118 104 ## precision recall term_id source ## 1 0.8559322 0.02077334 GO:0031323 GO:BP ## 2 0.8389831 0.01996370 GO:0051171 GO:BP ## 3 0.8474576 0.01963479 GO:0080090 GO:BP ## 4 0.8559322 0.01856618 GO:0060255 GO:BP ## 5 0.8813559 0.01760325 GO:0019222 GO:BP ## term_name effective_domain_size ## 1 regulation of cellular metabolic process 16324 ## 2 regulation of nitrogen compound metabolic process 16324 ## 3 regulation of primary metabolic process 16324 ## 4 regulation of macromolecule metabolic process 16324 ## 5 regulation of metabolic process 16324 ## source_order parents ## 1 7510 GO:0019222, GO:0044237, GO:0050794 ## 2 14316 GO:0006807, GO:0019222 ## 3 18790 GO:0019222, GO:0044238 ## 4 15305 GO:0019222, GO:0043170 ## 5 5900 GO:0008152, GO:0050789 4.4 Download and load g:profiler geneset file In order to create a proper Generic enrichment results file we will need a copy of the gmt file used by g:Profiler. (also to create an Enrichment map). Download the gmt file used for this analysis from g:profiler #the link to the gmt file is static no matter what version gprofiler_gmt_url &lt;- &quot;https://biit.cs.ut.ee/gprofiler/static/gprofiler_full_hsapiens.name.gmt&quot; #get version info gprofiler as the gmt file is always associated with # a specific version of g:profiler gprofiler_version &lt;- get_version_info(organism=organism) gprofiler_gmt_filename &lt;- file.path(working_dir, paste(&quot;gprofiler_full&quot;, organism, gprofiler_version$gprofiler_version,sep=&quot;_&quot;, &quot;.name.gmt&quot;)) if(!file.exists(gprofiler_gmt_filename)){ download.file(url = gprofiler_gmt_url, destfile = gprofiler_gmt_filename) } To create a proper Generic enrichmentMap results file we need to include the list of genes that are associated with each geneset. To do that we need to know what genes are associated with each set and filter them by our query set. Load in the geneset definitions from the gmt file we just downloaded from g:profiler site. #load in the g:profiler geneset file capt_output &lt;- capture.output(genesets_gprofiler &lt;- GSA.read.gmt( filename = gprofiler_gmt_filename)) names(genesets_gprofiler$genesets) &lt;- genesets_gprofiler$geneset.names For the next module the name of the gmt file is - gprofiler_full_hsapiens.name.gmt but it is important to preserve the database version so in the future when we revisit these results for publication or results verfication we have the exact version used. Instead of creating a copy of the file (which can be pretty large) create a symbolic link to the file with the generic name. #file.exists does not work for a symbolic link on my computer for some reason # list the files in the directory and check if the symbolic link is there #if(file.exists(file.path(working_dir, &quot;gprofiler_full_hsapiens.name.gmt&quot;))){ if(length(grep(x = list.files(file.path(working_dir)), pattern = &quot;gprofiler_full_hsapiens.name.gmt&quot;, fixed = TRUE) &gt; 0 )){ file.remove(file.path(working_dir, &quot;gprofiler_full_hsapiens.name.gmt&quot;)) } ## [1] TRUE file.symlink( gprofiler_gmt_filename,file.path(working_dir, &quot;gprofiler_full_hsapiens.name.gmt&quot;)) ## [1] TRUE # Given: # query_genes - genes used for enrichment analysis (or as query) # # returns - the genes that overlap with the query set and part of the given # genesets getGenesetGenes &lt;- function(query_genes, subset_genesets){ genes &lt;- lapply(subset_genesets,FUN=function(x){intersect(x,query_genes)}) # For each of the genes collapse to the comma separate text genes_collapsed &lt;- unlist(lapply(genes,FUN=function(x){ paste(x,collapse = &quot;,&quot;)})) genes_collapsed_df &lt;- data.frame(term_id = names(genes), genes = genes_collapsed,stringsAsFactors = FALSE) return(genes_collapsed_df) } 4.5 Filter results by geneset size Filter the table to include just the columns that are required for the generic enrichment map file results GEM. Restrict the results to just the ones that have at least min_gs_size and less than max_gs_size terms and min_intersection size include only the term_id, term_name, p_value (and p_value again because the p_value is actually the corrected p-value. The output file does not contain the nominal p_value. For down stream analysis though it is expected to have both a p-value and a q-value so just duplicate the q-value as both p-value and q-value) Vary the thresholds for max_gs_size just as we did in Module 2 lab - min_gs_size = 3 max_gs_size = 10000 max_gs_size = 1000 max_gs_size = 250 # filer by params defined above # by default we have set the max and min gs size to 250 and 3, respectively. enrichment_results_mxgssize_250_min_3 &lt;- subset(enrichment_results,term_size &gt;= min_gs_size &amp; term_size &lt;= max_gs_size &amp; intersection_size &gt;= min_intersection , select = c(term_id,term_name,p_value,p_value )) enrichment_results_mxgssize_1000_min_3 &lt;- subset(enrichment_results,term_size &gt;= min_gs_size &amp; term_size &lt;= 1000 &amp; intersection_size &gt;= min_intersection , select = c(term_id,term_name,p_value,p_value )) enrichment_results_mxgssize_10000_min_3 &lt;- subset(enrichment_results,term_size &gt;= min_gs_size &amp; term_size &lt;= 10000 &amp; intersection_size &gt;= min_intersection , select = c(term_id,term_name,p_value,p_value )) 4.6 Create an output file of the results - Generic enrichment Map file from g:profiler gmt The file requires - name description p-value q-value phenotyp list of genes (overlap of query set and original geneset) The list of genes needs to be calculated using the gmt file and original query set. For each geneset found in the result find the overlap between the set of genes that are a part of the geneset and the query set. # Given: # gprofiler_results - results form g_profiler R function (filtered by desired) # parameters # gs - genes associated with each geneset, loaded in from a gmt file. # # returns - the properly formatted GEM file results # createGEMformat &lt;- function(results, gs, query_genes){ if(nrow(results) &gt;0){ #add phenotype to the results formatted_results &lt;- cbind(results,1) # Add the genes to the genesets subset_genesets &lt;- gs$genesets[ which(gs$geneset.names %in% results$term_id)] genes &lt;- getGenesetGenes(query_genes, subset_genesets) formatted_results &lt;- merge(formatted_results,genes,by.x=1, by.y=1) colnames(formatted_results) &lt;- c(&quot;name&quot;,&quot;description&quot;,&quot;p-value&quot;, &quot;q-value&quot;,&quot;phenotype&quot;,&quot;genes&quot;) } return(formatted_results) } enrichment_results_mxgssize_10000_min_3_GEMfile &lt;- createGEMformat( enrichment_results_mxgssize_10000_min_3, genesets_gprofiler, query_set) enrichment_results_mxgssize_1000_min_3_GEMfile &lt;- createGEMformat( enrichment_results_mxgssize_1000_min_3, genesets_gprofiler, query_set) enrichment_results_mxgssize_250_min_3_GEMfile &lt;- createGEMformat( enrichment_results_mxgssize_250_min_3, genesets_gprofiler, query_set) Output each of the above filtered files #output the enrichment map file write.table(enrichment_results_mxgssize_10000_min_3_GEMfile, file = file.path(working_dir, &quot;gProfiler_hsapiens_lab2_results_GEM_termmin3_max10000.gem.txt&quot;), row.names = FALSE, col.names = TRUE, sep=&quot;\\t&quot;, quote = FALSE) #output the enrichment map file write.table(enrichment_results_mxgssize_1000_min_3_GEMfile, file = file.path(working_dir, &quot;gProfiler_hsapiens_lab2_results_GEM_termmin3_max1000.gem.txt&quot;), row.names = FALSE, col.names = TRUE, sep=&quot;\\t&quot;, quote = FALSE) #output the enrichment map file write.table(enrichment_results_mxgssize_250_min_3_GEMfile, file = file.path(working_dir, &quot;gProfiler_hsapiens_lab2_results_GEM_termmin3_max250.gem.txt&quot;), row.names = FALSE, col.names = TRUE, sep=&quot;\\t&quot;, quote = FALSE) 4.7 Run g:profiler with your own genesets (example using BaderLab genesets) 4.8 Download and load Bader lab geneset file Download the latest Bader lab genesets if(dest_gmt_file == &quot;&quot;){ gmt_url = &quot;http://download.baderlab.org/EM_Genesets/current_release/Human/symbol/&quot; #list all the files on the server filenames = RCurl::getURL(gmt_url) tc = textConnection(filenames) contents = readLines(tc) close(tc) #get the gmt that has all the pathways and does not include # terms inferred from electronic annotations(IEA) #start with gmt file that has pathways only rx = gregexpr(&quot;(?&lt;=&lt;a href=\\&quot;)(.*.GOBP_AllPathways_no_GO_iea.*.)(.gmt)(?=\\&quot;&gt;)&quot;, contents, perl = TRUE) gmt_file = unlist(regmatches(contents, rx)) dest_gmt_file &lt;- file.path(working_dir,gmt_file) if(!file.exists(dest_gmt_file)){ download.file( paste(gmt_url,gmt_file,sep=&quot;&quot;), destfile=dest_gmt_file ) } } In order to use our results down stream in the Enrichment map we need to generate results files that we can pass to Enrichment Map. Load in the GMT file 4.9 Filter Bader lab geneset file The g:Profiler interface only allows for filtering genesets by size only after the analysis is complete. After the analysis is complete means the filtering is happening after Multiple hypothesis testing. Filtering prior to the analysis will generate more robust results because we exclude the uninformative large genesets prior to testing changing the sets that multiple hypothesis filtering will get rid of. Create multiple gmt files with different filtering thresholds - remove * genesets greater than 250 genes * geneset greater than 1000 genes * geneset greater than 10000 genes # Filter geneset GSA object by specified gs size threshold # # Given - # genesets - in GSA object # gs_sizes - list of all the sizes of the genesets found in the genesets # filter_threshold - value to filter the geneset by. # # returns - filtered genesets in GSA object filter_genesets &lt;- function(genesets, gs_sizes, filter_threshold) { filtered_genesets &lt;- genesets filtered_genesets$genesets &lt;- genesets$genesets[ which(gs_sizes&lt;filter_threshold)] filtered_genesets$geneset.names &lt;- genesets$geneset.names[ which(gs_sizes&lt;filter_threshold)] filtered_genesets$geneset.descriptions &lt;- genesets$geneset.descriptions[ which(gs_sizes&lt;filter_threshold)] return(filtered_genesets) } # You can not simply write a list of lists to a file in R. In order # to output the new geneset file you need to convert it ot a data.frame # To do this convert the list of genes to a tab delmiated list in one column # of the dataframe. # format to write out to a file. # # Given - # genesets - in GSA object # returns - formatted genesets as data frame format_genesets &lt;- function(genesets) { collapsed_genesets &lt;- data.frame(name=genesets$geneset.names, description= genesets$geneset.description) collapsed_genesets$genes &lt;- unlist(lapply(genesets$genesets, FUN=function(x){ paste(x,collapse = &quot;\\t&quot;) })) return(collapsed_genesets) } The format of the GMT file is described https://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/Data_formats#GMT:Gene_Matrix_Transposed_file_format.28.2A.gmt.29 and consists of rows with the following Name Description tab delimited list of genes a part of this geneset Write out the gmt file with genenames #get the geneset sizes gs_sizes_baderlab_sets &lt;- lapply(genesets_baderlab_genesets$genesets, FUN = function(x){ length(x) }) # max 10,000 genesets_baderlab_genesets_max10000 &lt;- filter_genesets(genesets_baderlab_genesets, gs_sizes_baderlab_sets, 10000) genesets_baderlab_genesets_max10000_filename &lt;- gsub(x =dest_gmt_file, pattern = &quot;symbol&quot; , replacement = &quot;symbol_max10000&quot; ) if(!file.exists(genesets_baderlab_genesets_max10000_filename)){ write.table(x = format_genesets(genesets_baderlab_genesets_max10000), file = genesets_baderlab_genesets_max10000_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) } #max gs size of 1,000 genesets_baderlab_genesets_max1000 &lt;- filter_genesets(genesets_baderlab_genesets, gs_sizes_baderlab_sets, 1000) genesets_baderlab_genesets_max1000_filename &lt;- gsub(x =dest_gmt_file, pattern = &quot;symbol&quot; , replacement = &quot;symbol_max1000&quot; ) if(!file.exists(genesets_baderlab_genesets_max1000_filename)){ write.table(x = format_genesets(genesets_baderlab_genesets_max1000), file = genesets_baderlab_genesets_max1000_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) } #max gs size of 250 genesets_baderlab_genesets_max250 &lt;- filter_genesets(genesets_baderlab_genesets, gs_sizes_baderlab_sets, 250) genesets_baderlab_genesets_max250_filename &lt;- gsub(x =dest_gmt_file, pattern = &quot;symbol&quot; , replacement = &quot;symbol_max250&quot; ) if(!file.exists(genesets_baderlab_genesets_max250_filename)){ write.table(x = format_genesets(genesets_baderlab_genesets_max250), file = genesets_baderlab_genesets_max250_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) } 4.10 Upload the gmt files to gprofiler In order to use your own genesets with g:Profiler you need to upload the the file to their server first. The function will return an ID that you need to specify in the organism parameter of the g:Profiler gost function call. custom_gmt_max250 &lt;- upload_GMT_file( gmtfile=genesets_baderlab_genesets_max250_filename) ## Your custom annotations ID is gp__EbjI_jjsm_zjM ## You can use this ID as an &#39;organism&#39; name in all the related enrichment tests against this custom source. ## Just use: gost(my_genes, organism = &#39;gp__EbjI_jjsm_zjM&#39;) custom_gmt_max1000 &lt;- upload_GMT_file( gmtfile=genesets_baderlab_genesets_max1000_filename) ## Your custom annotations ID is gp__aVbs_2msh_ycg ## You can use this ID as an &#39;organism&#39; name in all the related enrichment tests against this custom source. ## Just use: gost(my_genes, organism = &#39;gp__aVbs_2msh_ycg&#39;) custom_gmt_max10000 &lt;- upload_GMT_file( gmtfile=genesets_baderlab_genesets_max10000_filename) ## Your custom annotations ID is gp__ZH9e_VFW0_rvM ## You can use this ID as an &#39;organism&#39; name in all the related enrichment tests against this custom source. ## Just use: gost(my_genes, organism = &#39;gp__ZH9e_VFW0_rvM&#39;) For this query we are specifying - query - the set of genes of interest, as loaded in from the Supplementary_Table1_Cancer_drivers.txt file. significant - set to FALSE because we want g:Profiler to return all the results not just the ones that it deems significant by its perdetermined threshold. ordered_query - set to FALSE (but you can try setting it to true as well because for this set of genes they are ordered in order of their significance) correction_method - set to fdr. by default g:Profiler uses g:Scs organism - set to the custom_gmt ID ( for this run it is - gp__EbjI_jjsm_zjM) that we received when we uploaded our genetset file. gprofiler_results_custom_max250 &lt;- gost(query = query_set , significant=FALSE, ordered_query = FALSE, exclude_iea=TRUE, correction_method = &quot;fdr&quot;, organism = custom_gmt_max250 ) ## Detected custom GMT source request gprofiler_results_custom_max1000 &lt;- gost(query = query_set , significant=FALSE, ordered_query = FALSE, exclude_iea=TRUE, correction_method = &quot;fdr&quot;, organism = custom_gmt_max1000 ) ## Detected custom GMT source request gprofiler_results_custom_max10000 &lt;- gost(query = query_set , significant=FALSE, ordered_query = FALSE, exclude_iea=TRUE, correction_method = &quot;fdr&quot;, organism = custom_gmt_max10000 ) ## Detected custom GMT source request #get the gprofiler results table enrichment_results_customgmt_max250 &lt;- gprofiler_results_custom_max250$result enrichment_results_customgmt_max1000 &lt;- gprofiler_results_custom_max1000$result enrichment_results_customgmt_max10000 &lt;- gprofiler_results_custom_max10000$result enrichment_results_customgmt_max250[1:5,] ## query significant p_value term_size query_size intersection_size ## 1 query_1 TRUE 6.644186e-20 64 109 17 ## 2 query_1 TRUE 1.060650e-19 68 109 17 ## 3 query_1 TRUE 1.926559e-14 54 109 13 ## 4 query_1 TRUE 5.137122e-14 97 109 15 ## 5 query_1 TRUE 1.818094e-13 159 109 17 ## precision recall ## 1 0.1559633 0.2656250 ## 2 0.1559633 0.2500000 ## 3 0.1192661 0.2407407 ## 4 0.1376147 0.1546392 ## 5 0.1559633 0.1069182 ## term_id ## 1 HEAD AND NECK SQUAMOUS CELL CARCINOMA%WIKIPATHWAYS_20220510%WP4674%HOMO SAPIENS ## 2 GLIOBLASTOMA SIGNALING PATHWAYS%WIKIPATHWAYS_20220510%WP2261%HOMO SAPIENS ## 3 PATHWAYS AFFECTED IN ADENOID CYSTIC CARCINOMA%WIKIPATHWAYS_20220510%WP3651%HOMO SAPIENS ## 4 CELL CYCLE%WIKIPATHWAYS_20220510%WP179%HOMO SAPIENS ## 5 REGULATION OF CELL CYCLE G1/S PHASE TRANSITION%GOBP%GO:1902806 ## source ## 1 Human_GOBP_AllPathways_no_GO_iea_April_02_2023_symbol_max250 ## 2 Human_GOBP_AllPathways_no_GO_iea_April_02_2023_symbol_max250 ## 3 Human_GOBP_AllPathways_no_GO_iea_April_02_2023_symbol_max250 ## 4 Human_GOBP_AllPathways_no_GO_iea_April_02_2023_symbol_max250 ## 5 Human_GOBP_AllPathways_no_GO_iea_April_02_2023_symbol_max250 ## term_name effective_domain_size ## 1 Head and neck squamous cell carcinoma 17047 ## 2 Glioblastoma signaling pathways 17047 ## 3 Pathways affected in adenoid cystic carcinoma 17047 ## 4 Cell cycle 17047 ## 5 regulation of cell cycle G1/S phase transition 17047 ## source_order parents ## 1 5002 NULL ## 2 5554 NULL ## 3 4968 NULL ## 4 4934 NULL ## 5 19009 NULL Filter the table to include just the columns that are required for the generic enrichment map file results GEM. Restrict the results to just the ones that have at least min_gs_size and less than max_gs_size terms and min_intersection size include only the term_id, term_name, p_value (and p_value again because the p_value is actually the corrected p-value. The output file does not contain the nominal p_value. For down stream analysis though it is expected to have both a p-value and a q-value so just duplicate the q-value as both p-value and q-value) # filer by params defined above enrichment_results_customgmt_max250 &lt;- subset(enrichment_results_customgmt_max250, term_size &gt;= min_gs_size &amp; term_size &lt;= max_gs_size &amp; intersection_size &gt;= min_intersection , select = c(term_id,term_name,p_value,p_value )) enrichment_results_customgmt_max1000 &lt;- subset(enrichment_results_customgmt_max1000, term_size &gt;= min_gs_size &amp; term_size &lt;= max_gs_size &amp; intersection_size &gt;= min_intersection , select = c(term_id,term_name,p_value,p_value )) enrichment_results_customgmt_max10000 &lt;- subset(enrichment_results_customgmt_max10000, term_size &gt;= min_gs_size &amp; term_size &lt;= max_gs_size &amp; intersection_size &gt;= min_intersection , select = c(term_id,term_name,p_value,p_value )) 4.11 Create an output file of the results - Generic enrichment Map file from Baderlab gmt Use the same function defined above but instead of passing the genesets from the g_profiler gmt file pass the geneset defitnions we loaded in from the Baderlab gmt file. enrichment_results_customgmt_GEM_max250 &lt;- createGEMformat( enrichment_results_customgmt_max250, genesets_baderlab_genesets_max250, query_set) #output the enrichment map file write.table(enrichment_results_customgmt_GEM_max250, file = file.path( working_dir, &quot;gProfiler_hsapiens_Baderlab_max250.gem.txt&quot;), row.names = FALSE, col.names = TRUE, sep=&quot;\\t&quot;, quote = FALSE) enrichment_results_customgmt_GEM_max1000 &lt;- createGEMformat( enrichment_results_customgmt_max1000, genesets_baderlab_genesets_max1000, query_set) #output the enrichment map file write.table(enrichment_results_customgmt_GEM_max1000, file = file.path( working_dir, &quot;gProfiler_hsapiens_Baderlab_max1000.gem.txt&quot;), row.names = FALSE, col.names = TRUE, sep=&quot;\\t&quot;, quote = FALSE) enrichment_results_customgmt_GEM_max10000 &lt;- createGEMformat( enrichment_results_customgmt_max10000, genesets_baderlab_genesets_max10000, query_set) #output the enrichment map file write.table(enrichment_results_customgmt_GEM_max10000, file = file.path( working_dir, &quot;gProfiler_hsapiens_Baderlab_max10000.gem.txt&quot;), row.names = FALSE, col.names = TRUE, sep=&quot;\\t&quot;, quote = FALSE) "],["run-gsea-from-within-r.html", "Chapter 5 Run GSEA from within R 5.1 Load in required libraries 5.2 Configurable Parameters 5.3 Download the latest pathway definition file 5.4 Run GSEA", " Chapter 5 Run GSEA from within R This notebook is based largely on the original notebook published with EnrichmentMap Protocol(Reimand et al. 2019) There is no package to run the original algorithm of GSEA(Subramanian et al. 2005) in R. There are many packages that have been published to imitate the process but none are recognized by The GSEA team. 5.1 Load in required libraries #install required R and bioconductor packages tryCatch(expr = { library(&quot;RCurl&quot;)}, error = function(e) { install.packages(&quot;RCurl&quot;)}, finally = library(&quot;RCurl&quot;)) 5.2 Configurable Parameters In order to run GSEA automatically through the notebook you will need to download the gsea jar from here. Specify the exact path to the gsea jar in the parameters in order to automatically compute enrichments using GSEA. If you are running this notebook using the baderlab workshop docker image then the image comes pre-installed with the gsea jar that you can use to run gsea directly in the docker. The path to the GSEA jar in the docker is - /home/rstudio/GSEA_4.3.2/gsea-cli.sh In order to run GSEA automatically you need to speciry the path to the gsea jar file. The gsea_jar needs to be the full path to the GSEA 4.3.2 directory that you downloaded from GSEA. for example /Users/johnsmith/GSEA_4.3.2/gsea-cli.sh The parameters are set manually here but if you want to run the script from the command line then you can update the notebook to pull the parameters from the command line given arguments by updating each variable below to pull the values from the paramters - for example: variable &lt;- params$parameter_name For more details see - defining and using parameters and Knitting with parameters #path to GSEA jar gsea_jar &lt;- &quot;/home/rstudio/GSEA_4.3.2/gsea-cli.sh&quot; Set the working directory as the directory to the directory where you downloaded all protocol files. For example /User/JohnSmith/EMProtocolFiles/data #directory where all the data files are found. For example - ./data/ working_dir &lt;- &quot;./data/&quot; #directory where all the data files are found. For example - ./generated_data/gsea/ output_dir &lt;- &quot;./generated_data/gsea/&quot; #The name to give the analysis in GSEA - for example Mesen_vs_Immuno analysis_name &lt;- &quot;Mesen_vs_Immuno&quot; #rank file to use in GSEA analysis. #For example - MesenchymalvsImmunoreactive_edger_ranks.rnk rnk_file &lt;- &quot;MesenchymalvsImmunoreactive_edger_ranks.rnk&quot; #run_gsea - true/false # This parameter is for the compilation of the notebook. run_gsea &lt;- FALSE #set the gmt file you want to use if you don&#39;t want to use the latest gmt file. # For example, if you set dest_gmt_file ==&quot;&quot; the below script will automatically # download the latest gmt file from baderlab webstie. If it is set then it # will use the file specified. dest_gmt_file = file.path(output_dir, &quot;Human_GOBP_AllPathways_no_GO_iea_April_02_2023_symbol.gmt&quot;) 5.3 Download the latest pathway definition file Only Human, Mouse, Rat, and Woodchuck gene set files are currently available on the baderlab downloads site. If you are working with a species other than human (and it is either rat,mouse or woodchuck) change the gmt_url below to the correct species. Check here to see all available species. To create your own GMT file using Ensembl see Create GMT file from Ensembl if(dest_gmt_file == &quot;&quot;){ gmt_url = &quot;http://download.baderlab.org/EM_Genesets/current_release/Human/symbol/&quot; #list all the files on the server filenames = getURL(gmt_url) tc = textConnection(filenames) contents = readLines(tc) close(tc) #get the gmt that has all the pathways and does not include terms # inferred from electronic annotations(IEA) #start with gmt file that has pathways only and GO Biological Process only. rx = gregexpr(&quot;(?&lt;=&lt;a href=\\&quot;)(.*.GOBP_AllPathways_no_GO_iea.*.)(.gmt)(?=\\&quot;&gt;)&quot;, contents, perl = TRUE) gmt_file = unlist(regmatches(contents, rx)) dest_gmt_file &lt;- file.path(output_dir,gmt_file ) #check if this gmt file already exists if(!file.exists(dest_gmt_file)){ download.file( paste(gmt_url,gmt_file,sep=&quot;&quot;), destfile=dest_gmt_file ) } } 5.4 Run GSEA (GSEA)[http://software.broadinstitute.org/gsea/index.jsp] is a stand alone java program with many customizable options. It can be easily run through its integrated user interface. To make this a seemless pipeline we can run GSEA from the command line with a set of options. Any of the supplied options can be customized and there are many additional options that can be specified. For more details see (here)[http://software.broadinstitute.org/gsea/doc/GSEAUserGuideTEXT.htm#_Running_GSEA_from] In the below command the following options have been specified: rnk - path to the rank file gmx - path to the gene set definition (gmt) file collapse - true/false indicates whether the expression/rnk file needs to be collapsed from probes to gene symbols nperm - number of permutations scoring_scheme - rpt_label - name of the directory with output rnd_seed - random seed to use set_max - maximum size for individual gene sets. In GSEA interface this is set to 500 but we prefer to use a more stringent setting of 200. set_min - minimum size for individual gene sets zip_report - true/false to zip output directory out - directory where to place the result directory. if(run_gsea){ command &lt;- paste(&quot;&quot;,gsea_jar, &quot;GSEAPreRanked -gmx&quot;, dest_gmt_file, &quot;-rnk&quot; ,file.path(working_dir,rnk_file), &quot;-collapse false -nperm 1000 -scoring_scheme weighted&quot;, &quot;-rpt_label &quot;,analysis_name, &quot; -plot_top_x 20 -rnd_seed 12345 -set_max 200&quot;, &quot; -set_min 15 -zip_report false &quot;, &quot; -out&quot; ,output_dir, &quot; &gt; gsea_output.txt&quot;,sep=&quot; &quot;) system(command) } References "],["create-gmt-file-from-ensembl.html", "Chapter 6 Create GMT file from Ensembl 6.1 Load Libraries 6.2 Set up Biomart connection 6.3 Get species GO annotations 6.4 Format results into GMT file", " Chapter 6 Create GMT file from Ensembl The Baderlab geneset download site is an updated resource for geneset files from GO, Reactome, WikiPathways, Pathbank, NetPath, HumanCyc, IOB, … many others that can be used in g:Profiler or GSEA and many other enrichment tools that support the gmt format. Unfortunately genesets are only supplied for: Human Mouse Rat Woodchuck If you are working in a different species you will need to generate your own gmt file. The best way to do this is through ensembl. Ensembl doesn’t have annotations for all the pathway databases listed above but it has annotations for most species from GO. The parameters are set in the params option on this notebook but you can also manually set them here. # for example - working_dir &lt;- &quot;./genereated_data&quot; working_dir &lt;- params$working_dir # for example - species &lt;- &quot;horse&quot; species &lt;- params$species # for example - ensembl_dataset &lt;- &quot;ecaballus_gene_ensembl&quot; ensembl_dataset &lt;- params$ensembl_dataset #use library #make sure biocManager is installed tryCatch(expr = { library(&quot;BiocManager&quot;)}, error = function(e) { install.packages(&quot;BiocManager&quot;)}, finally = library(&quot;BiocManager&quot;)) ## Bioconductor version &#39;3.16&#39; is out-of-date; the current release version &#39;3.17&#39; ## is available with R version &#39;4.3&#39;; see https://bioconductor.org/install tryCatch(expr = { library(&quot;biomaRt&quot;)}, error = function(e) { BiocManager::install(&quot;biomaRt&quot;)}, finally = library(&quot;biomaRt&quot;)) 6.1 Load Libraries Create or set a directory to store all the generatd results if(!dir.exists(params$working_dir)){ dir.create(params$working_dir) } 6.2 Set up Biomart connection Connect to Biomart ensembl &lt;- useEnsembl(biomart = &quot;genes&quot;,host = &quot;asia.ensembl.org&quot;) Figure out which dataset you want to use - for some species there might be a few datasets to choose from. Not all of the datasets have common namesa associated with them. For example, if you search for ‘yeast’ nothing will be returned but if you look for Saccharomyces or cerevisiae you will be able to find it. all_datasets &lt;- listDatasets(ensembl) #get all the datasets that match our species definition all_datasets[grep(all_datasets$description, pattern=species, ignore.case = TRUE),] ## dataset description ## 60 ecaballus_gene_ensembl Horse genes (EquCab3.0) ## 76 hcomes_gene_ensembl Tiger tail seahorse genes (H_comes_QL1_v1) ## 164 rferrumequinum_gene_ensembl Greater horseshoe bat genes (mRhiFer1_v1.p) ## version ## 60 EquCab3.0 ## 76 H_comes_QL1_v1 ## 164 mRhiFer1_v1.p If you know the ensembl dataset that you want to use you can specify it in the parameters above or grab from the above table the dataset of the species that you are interested in. ensembl = useDataset(ensembl_dataset,mart=ensembl) 6.3 Get species GO annotations Get the GO annotations for our species go_annotation &lt;- getBM(attributes = c(&quot;external_gene_name&quot;, &quot;ensembl_gene_id&quot;, &quot;ensembl_transcript_id&quot;, &quot;go_id&quot;, &quot;name_1006&quot;, &quot;namespace_1003&quot;, &quot;go_linkage_type&quot;), filters=list(biotype=&#39;protein_coding&#39;), mart=ensembl); #get just the go biological process subset ##### # Get rid of this line if you want to include all of go and not just biological process ##### go_annotation_bp &lt;- go_annotation[which( go_annotation$namespace_1003 == &quot;biological_process&quot;),] #compute the unique pathway sets go_pathway_sets &lt;- aggregate(go_annotation_bp[,1:5], by = list(go_annotation_bp$go_id), FUN = function(x){list(unique(x))}) #unlist the go descriptions go_pathway_sets$name_1006 &lt;- apply(go_pathway_sets,1,FUN=function(x){ paste(gsub(unlist(x$name_1006),pattern= &quot;\\&quot;&quot;, replacement = &quot;&quot;),collapse = &quot;&quot;)}) There are two identifiers that you can choose from in the above table * external_symbols * ensembl_ids Each of these is stored as a list in the dataframe. In order to convert it to the right format for the gmt file we need to convert the list to string of tab delimited strings. (unfortunately there is no streaightforward way to write out a dataframe’s column of lists.) go_pathway_sets[1:3,&quot;external_gene_name&quot;] ## [[1]] ## [1] &quot;MEF2A&quot; &quot;SLC25A36&quot; &quot;OPA1&quot; &quot;MGME1&quot; &quot;SLC25A33&quot; &quot;TYMP&quot; &quot;AKT3&quot; ## [8] &quot;PIF1&quot; ## ## [[2]] ## [1] &quot;GNRH1&quot; &quot;GNRH2&quot; &quot;LIN9&quot; ## ## [[3]] ## [1] &quot;ERCC6&quot; &quot;ERCC8&quot; &quot;LIG4&quot; &quot;APLF&quot; &quot;APTX&quot; &quot;XRCC1&quot; &quot;SIRT1&quot; &quot;XNDC1&quot; go_pathway_sets[1:3,&quot;ensembl_gene_id&quot;] ## [[1]] ## [1] &quot;ENSECAG00000011593&quot; &quot;ENSECAG00000010094&quot; &quot;ENSECAG00000024248&quot; ## [4] &quot;ENSECAG00000012675&quot; &quot;ENSECAG00000016862&quot; &quot;ENSECAG00000001072&quot; ## [7] &quot;ENSECAG00000019722&quot; &quot;ENSECAG00000005316&quot; ## ## [[2]] ## [1] &quot;ENSECAG00000010664&quot; &quot;ENSECAG00000039220&quot; &quot;ENSECAG00000014325&quot; ## ## [[3]] ## [1] &quot;ENSECAG00000014160&quot; &quot;ENSECAG00000018335&quot; &quot;ENSECAG00000003257&quot; ## [4] &quot;ENSECAG00000013246&quot; &quot;ENSECAG00000012674&quot; &quot;ENSECAG00000014127&quot; ## [7] &quot;ENSECAG00000013909&quot; &quot;ENSECAG00000042118&quot; 6.4 Format results into GMT file Convert column of lists to a tab delimited string of gene names go_pathway_sets$collapsed_genenames &lt;- apply(go_pathway_sets,1, FUN=function(x){ paste(gsub(unlist(x$external_gene_name),pattern= &quot;\\&quot;&quot;, replacement = &quot;&quot;),collapse = &quot;\\t&quot;) }) Convert column of lists to a tab delimited string of gene names go_pathway_sets$collapsed_ensemblids &lt;- apply(go_pathway_sets,1, FUN=function(x){ paste(gsub(unlist(x$ensembl_gene_id),pattern= &quot;\\&quot;&quot;, replacement = &quot;&quot;),collapse = &quot;\\t&quot;) }) The format of the GMT file is described https://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/Data_formats#GMT:Gene_Matrix_Transposed_file_format.28.2A.gmt.29 and consists of rows with the following Name Description tab delimited list of genes a part of this geneset Write out the gmt file with genenames gmt_file_genenames &lt;- go_pathway_sets[,c(&quot;Group.1&quot;,&quot;name_1006&quot;, &quot;collapsed_genenames&quot;)] colnames(gmt_file_genenames)[1:2] &lt;- c(&quot;name&quot;,&quot;description&quot;) gmt_genenames_filename &lt;- file.path(params$working_dir, paste(species,ensembl_dataset,&quot;GO_genesets_GN.gmt&quot;,sep = &quot;_&quot;)) write.table(x = gmt_file_genenames,file = gmt_genenames_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) Write out the gmt file with ensembl ids gmt_file_ensemblids &lt;- go_pathway_sets[,c(&quot;Group.1&quot;,&quot;name_1006&quot;, &quot;collapsed_ensemblids&quot;)] colnames(gmt_file_ensemblids)[1:2] &lt;- c(&quot;name&quot;,&quot;description&quot;) gmt_ensemblids_filename &lt;- file.path(params$working_dir, paste(species,ensembl_dataset,&quot;GO_genesets_esemblids.gmt&quot;,sep = &quot;_&quot;)) write.table(x = gmt_file_ensemblids,file = gmt_ensemblids_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) "],["create-enrichment-map-from-r-with-gprofiler-results.html", "Chapter 7 Create Enrichment map from R with g:Profiler results 7.1 Initialize variables and libraries 7.2 Configurable Parameters 7.3 Specify Data files 7.4 Launch Cytoscape 7.5 Make sure you can connect to Cytoscape 7.6 Create an Enrichment map 7.7 Create an Enrichment map - run EM command 7.8 Get a screen shot of the initial network.", " Chapter 7 Create Enrichment map from R with g:Profiler results 7.1 Initialize variables and libraries #use library #make sure biocManager is installed tryCatch(expr = { library(&quot;BiocManager&quot;)}, error = function(e) { install.packages(&quot;BiocManager&quot;)}, finally = library(&quot;BiocManager&quot;)) ## Bioconductor version &#39;3.16&#39; is out-of-date; the current release version &#39;3.17&#39; ## is available with R version &#39;4.3&#39;; see https://bioconductor.org/install tryCatch(expr = { library(&quot;ggplot2&quot;)}, error = function(e) { install.packages(&quot;ggplot2&quot;)}, finally = library(&quot;ggplot2&quot;)) #use easy cyRest library to communicate with cytoscape. tryCatch(expr = { library(&quot;RCy3&quot;)}, error = function(e) { BiocManager::install(&quot;RCy3&quot;)}, finally = library(&quot;RCy3&quot;)) tryCatch(expr = { library(&quot;httr&quot;)}, error = function(e) { BiocManager::install(&quot;httr&quot;)}, finally = library(&quot;httr&quot;)) 7.2 Configurable Parameters # is_docker - true/false depending on if you are running R from docker is_docker &lt;- TRUE #directory where all the original input data file are # for example ./data/ working_dir &lt;- &quot;./data/&quot; #directory where all the generated data files are found. # For example - ./generated_data/ # If you are using all the notebooks from this set the generated data will be # put in the ./generated_data folder. You have to specify if it is gsea or # gprofiler output_dir &lt;- &quot;./generated_data/g_profiler&quot; #defined threshold for gprofiler enrichments #p-value to filter all the genesets. For example - 1.0 pvalue_gprofiler_threshold &lt;- 1.0 #q-value to filter all the genesets. For example - 0.05 qvalue_gprofiler_threshold &lt;- 0.001 #similarity threshold to filter all the genesets connections/edges. # For example - 0.375 similarity_threshold &lt;- &quot;0.35&quot; #similarity metric to filter all the genesets connections/edges # (can be OVERLAP, JACCARD, or COMBINED. For example - Combined similarity_metric = &quot;JACCARD&quot; 7.3 Specify Data files Depending on whether you are creating your enrichment map from g:Profiler or GSEA results the sets of files might be a little different. Minimally, you will need to specify: * gmt file * enrichment results file We have multiple g:profiler results. * varied geneset size limit ( 250, 1000 or 10,000) * varied geneset sources - baderlab genesets or g:profiler sets. gmt_gprofiler_file&lt;-file.path(getwd(),output_dir, &quot;gprofiler_full_hsapiens_e109_eg56_p17_1d3191d_.name.gmt&quot;) gprofiler_results_filename1 &lt;-file.path(getwd(),output_dir, &quot;gProfiler_hsapiens_lab2_results_GEM_termmin3_max250.gem.txt&quot;) gprofiler_results_filename2 &lt;-file.path(getwd(),output_dir, &quot;gProfiler_hsapiens_lab2_results_GEM_termmin3_max10000.gem.txt&quot;) current_network_name &lt;- paste(&quot;gprofiler_max250&quot;,pvalue_gprofiler_threshold, qvalue_gprofiler_threshold,sep=&quot;_&quot;) 7.4 Launch Cytoscape Launch Cytoscape (by default cytoscape will automatically enable rest so as long as cytoscape 3.3 or higher is open R should be able to communicate with it). Make sure if you get an message asking you if you want communicate with other apps that you select “Allow”. 7.5 Make sure you can connect to Cytoscape if(is_docker){ current_base = &quot;host.docker.internal:1234/v1&quot; .defaultBaseUrl &lt;- &quot;http://host.docker.internal:1234/v1&quot; } else{ current_base = &quot;localhost:1234/v1&quot; } cytoscapePing (base.url = current_base) ## You are connected to Cytoscape! cytoscapeVersionInfo (base.url = current_base) ## apiVersion cytoscapeVersion ## &quot;v1&quot; &quot;3.10.0&quot; 7.6 Create an Enrichment map If you are running R from within a docker you need to first upload your datafiles to Cytoscape before you can create your enrichment map #if using docker we need to replace all the the paths to the host path if(is_docker) { upload_em_file &lt;- function(localPath) { bname &lt;- basename(localPath) r &lt;- POST( url = paste(&#39;http://host.docker.internal:1234/enrichmentmap/textfileupload?fileName=&#39;, bname, sep=&quot;&quot;), config = list(), body = list(file = upload_file(localPath)), encode = &quot;multipart&quot;, handle = NULL ) content(r,&quot;parsed&quot;)$path } # &quot;upload&quot; the files to the host machine and replace each path with the # host machine path gmt_gprofiler_file &lt;- upload_em_file(gmt_gprofiler_file) gprofiler_results_filename1 &lt;- upload_em_file(gprofiler_results_filename1) gprofiler_results_filename2 &lt;- upload_em_file(gprofiler_results_filename2) } 7.7 Create an Enrichment map - run EM command ####################################### #create EM em_command = paste(&#39;enrichmentmap build analysisType=&quot;generic&quot; gmtFile=&#39;, gmt_gprofiler_file, &#39;pvalue=&#39;,pvalue_gprofiler_threshold, &#39;qvalue=&#39;,qvalue_gprofiler_threshold, &#39;similaritycutoff=&#39;,similarity_threshold, &#39;coefficients=&#39;,similarity_metric, &#39;enrichmentsDataset1=&#39;,gprofiler_results_filename1, &#39;enrichmentsDataset2=&#39;,gprofiler_results_filename2, &#39;gmtFile=&#39;,gmt_gprofiler_file, &#39;filterByExpressions=false&#39;, sep=&quot; &quot;) #enrichment map command will return the suid of newly created network. response &lt;- commandsGET(em_command,base.url = current_base) current_network_suid &lt;- 0 #enrichment map command will return the suid of newly created network # unless it Failed. If it failed it will contain the word failed if(grepl(pattern=&quot;Failed&quot;, response)){ paste(response) } else { current_network_suid &lt;- response } #check to see if the network name is unique current_names &lt;- getNetworkList(base.url = current_base) if(current_network_name %in% current_names){ #if the name already exists in the network names then put the SUID in front # of the name (this does not work if you put the suid at the end of the name) current_network_name &lt;- paste(current_network_suid, current_network_name, sep=&quot;_&quot;) } response &lt;- renameNetwork(title=current_network_name, network = as.numeric(current_network_suid), base.url = current_base) 7.8 Get a screen shot of the initial network. #you can only output the file if it isn&#39;t on docker #on docker is put it into the user&#39;s home directory with docker has not access to if(!is_docker){ output_network_file &lt;- file.path(getwd(),&quot;initial_screenshot_network.png&quot;) output_network_file_current &lt;- output_network_file fitContent() if(file.exists(output_network_file)){ #cytoscape hangs waiting for user response if file already exists. # Remove it first response &lt;- file.remove(output_network_file) } response &lt;- exportImage(output_network_file, type = &quot;png&quot;, base.url = current_base) } Change the files and create all the different networks we generated in class in Cytoscape. "],["create-enrichment-map-from-r-with-gsea-results.html", "Chapter 8 Create Enrichment map from R with GSEA results 8.1 Initialize variables and libraries 8.2 Configurable Parameters 8.3 Specify Data files 8.4 Optional File specification 8.5 Launch Cytoscape 8.6 Make sure you can connect to Cytoscape 8.7 Create an Enrichment map 8.8 Create an Enrichment map - run EM command 8.9 Get a screen shot of the initial network.", " Chapter 8 Create Enrichment map from R with GSEA results 8.1 Initialize variables and libraries #use library #make sure biocManager is installed tryCatch(expr = { library(&quot;BiocManager&quot;)}, error = function(e) { install.packages(&quot;BiocManager&quot;)}, finally = library(&quot;BiocManager&quot;)) ## Bioconductor version &#39;3.16&#39; is out-of-date; the current release version &#39;3.17&#39; ## is available with R version &#39;4.3&#39;; see https://bioconductor.org/install tryCatch(expr = { library(&quot;ggplot2&quot;)}, error = function(e) { install.packages(&quot;ggplot2&quot;)}, finally = library(&quot;ggplot2&quot;)) #use easy cyRest library to communicate with cytoscape. tryCatch(expr = { library(&quot;RCy3&quot;)}, error = function(e) { BiocManager::install(&quot;RCy3&quot;)}, finally = library(&quot;RCy3&quot;)) tryCatch(expr = { library(&quot;httr&quot;)}, error = function(e) { BiocManager::install(&quot;httr&quot;)}, finally = library(&quot;httr&quot;)) 8.2 Configurable Parameters # is_docker - true/false depending on if you are running R from docker is_docker &lt;- TRUE #directory where all the original input data file are # for example ./data/ working_dir &lt;- &quot;./data/&quot; #directory where all the generated data files are found. # For example - ./generated_data/ # If you are using all the notebooks from this set the generated data will be # put in the ./generated_data folder. You have to specify if it is gsea or # gprofiler output_dir &lt;- &quot;./generated_data/gsea/&quot; #defined threshold for GSEA enrichments #p-value to filter all the genesets. For example - 1.0 pvalue_gsea_threshold &lt;- 1.0 #q-value to filter all the genesets. For example - 0.05 qvalue_gsea_threshold &lt;- 0.05 #similarity threshold to filter all the genesets connections/edges. # For example - 0.375 similarity_threshold &lt;- &quot;0.375&quot; #similarity metric to filter all the genesets connections/edges # (can be OVERLAP, JACCARD, or COMBINED. For example - Combined similarity_metric = &quot;COMBINED&quot; 8.3 Specify Data files Depending on whether you are creating your enrichment map from g:Profiler or GSEA results the sets of files might be a little different. Minimally, you will need to specify: * gmt file * enrichment results file Although there is a gmt file in the gsea edb results directory(which is the easiest method to create an enrichment map) it have been filtered to contain only genes represented in the expression set. If you use this fltered file you will get different pathway connectivity depending on the dataset being used. We recommend using original gmt file used for the gsea analysis and not the filtered one in the results directory. #use the newest gmt file in the output directory gmt_files &lt;- list.files(path = output_dir, pattern = &quot;\\\\.gmt&quot;) #get the details on the files details = file.info(file.path(output_dir,gmt_files)) #order according to newest to oldest details = details[with(details, order(as.POSIXct(mtime),decreasing = TRUE)), ] #use the newest file: gmt_gsea_file &lt;- row.names(details)[1] GSEA output directory - You can specify the exact name of the directory. The below code looks for the newest GSEA results directory and uses that. gsea_directories &lt;- list.files(path = output_dir, pattern = &quot;\\\\.GseaPreranked&quot;) #get the details on the files details = file.info(file.path(output_dir,gsea_directories)) #order according to newest to oldest details = details[with(details, order(as.POSIXct(mtime),decreasing = TRUE)), ] #use the newest file: gsea_output_dir &lt;- row.names(details)[1] gsea_results_path &lt;- file.path(gsea_output_dir,&quot;edb&quot;) gsea_results_filename &lt;- file.path(gsea_results_path,&quot;results.edb&quot;) 8.4 Optional File specification These files are not needed to create the enrichment map but are very beneficial when analyzing your result. * gene expression file * gene ranks file gsea_ranks_file &lt;- file.path(gsea_results_path, list.files(gsea_results_path,pattern=&quot;.rnk&quot;)) expression_file_fullpath &lt;- file.path(working_dir, &quot;MesenchymalvsImmunoreactive_rnaseq_expression.txt&quot;) #define an analysis name cur_model_name &lt;- &quot;Mesen_vs_Immuno_buildfromR&quot; 8.5 Launch Cytoscape Launch Cytoscape (by default cytoscape will automatically enable rest so as long as cytoscape 3.3 or higher is open R should be able to communicate with it). Make sure if you get an message asking you if you want communicate with other apps that you select “Allow”. 8.6 Make sure you can connect to Cytoscape if(is_docker){ current_base = &quot;host.docker.internal:1234/v1&quot; .defaultBaseUrl &lt;- &quot;http://host.docker.internal:1234/v1&quot; } else{ current_base = &quot;localhost:1234/v1&quot; } cytoscapePing (base.url = current_base) ## You are connected to Cytoscape! cytoscapeVersionInfo (base.url = current_base) ## apiVersion cytoscapeVersion ## &quot;v1&quot; &quot;3.10.0&quot; 8.7 Create an Enrichment map If you are running R from within a docker you need to first upload your datafiles to Cytoscape before you can create your enrichment map #if using docker we need to replace all the the paths to the host path if(is_docker) { upload_em_file &lt;- function(localPath) { bname &lt;- basename(localPath) r &lt;- POST( url = paste(&#39;http://host.docker.internal:1234/enrichmentmap/textfileupload?fileName=&#39;, bname, sep=&quot;&quot;), config = list(), body = list(file = upload_file(localPath)), encode = &quot;multipart&quot;, handle = NULL ) content(r,&quot;parsed&quot;)$path } # &quot;upload&quot; the files to the host machine and replace each path # with the host machine path expression_file_fullpath &lt;- upload_em_file(expression_file_fullpath) gmt_gsea_file &lt;- upload_em_file(gmt_gsea_file) gsea_ranks_file &lt;- upload_em_file(gsea_ranks_file) gsea_results_filename &lt;- upload_em_file(gsea_results_filename) } 8.8 Create an Enrichment map - run EM command ####################################### #create EM current_network_name &lt;- paste(cur_model_name,pvalue_gsea_threshold, qvalue_gsea_threshold,sep=&quot;_&quot;) em_command = paste(&#39;enrichmentmap build analysisType=&quot;gsea&quot; gmtFile=&#39;, gmt_gsea_file, &#39;pvalue=&#39;,pvalue_gsea_threshold, &#39;qvalue=&#39;,qvalue_gsea_threshold, &#39;similaritycutoff=&#39;,similarity_threshold, &#39;coefficients=&#39;,similarity_metric, &#39;ranksDataset1=&#39;, gsea_ranks_file, &#39;enrichmentsDataset1=&#39;,gsea_results_filename, &#39;filterByExpressions=false&#39;, &#39;expressionDataset1=&#39;,expression_file_fullpath, &#39;gmtFile=&#39;,gmt_gsea_file, sep=&quot; &quot;) #enrichment map command will return the suid of newly created network. response &lt;- commandsGET(em_command,base.url = current_base) current_network_suid &lt;- 0 #enrichment map command will return the suid of newly created network # unless it Failed. If it failed it will contain the word failed if(grepl(pattern=&quot;Failed&quot;, response)){ paste(response) } else { current_network_suid &lt;- response } #check to see if the network name is unique current_names &lt;- getNetworkList(base.url = current_base) if(current_network_name %in% current_names){ #if the name already exists in the network names then put the SUID in front # of the name (this does not work if you put the suid at the end of the name) current_network_name &lt;- paste(current_network_suid, current_network_name,sep=&quot;_&quot;) } response &lt;- renameNetwork(title=current_network_name, network = as.numeric(current_network_suid), base.url = current_base) 8.9 Get a screen shot of the initial network. #you can only output the file if it isn&#39;t on docker #on docker is put it into the user&#39;s home directory with docker # has not access to if(!is_docker){ output_network_file &lt;- file.path(getwd(),&quot;initial_screenshot_network.png&quot;) output_network_file_current &lt;- output_network_file fitContent() if(file.exists(output_network_file)){ #cytoscape hangs waiting for user response if file already exists. # Remove it first response &lt;- file.remove(output_network_file) } response &lt;- exportImage(output_network_file, type = &quot;png&quot;, base.url = current_base) } "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
