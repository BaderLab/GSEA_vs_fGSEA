[["index.html", "CBW pathways Workshops - example R notebooks Chapter 1 Index", " CBW pathways Workshops - example R notebooks Ruth Isserlin 2023-04-05 Chapter 1 Index "],["intro.html", "Chapter 2 CBW Workshop example R Notebooks", " Chapter 2 CBW Workshop example R Notebooks Do you want to run the pathways and network analysis from R instead of doing everything mannually as demonstrated in the workshop? Everything (almost!) that was discussed in the lectures and practicals can be done computationally through R. We are using the bookdown package (Xie 2023) in this Workshop R Notebooks book, which was built on top of R Markdown and knitr (Xie 2015). References "],["setup.html", "Chapter 3 Setup 3.1 Install R and RStudio 3.2 Docker [Optional] 3.3 Install Docker", " Chapter 3 Setup 3.1 Install R and RStudio As with many open source projects, R is a constantly evolving language with regular updates. There is a major release once a year with patch releases through out the year. Often scripts and packages will work from one release to the next (ignoring pesky warnings that a package was compiled on a previous version of R is common) but there are exceptions. Some newer packages will only work on the latest version of R so sometimes the choice of upgrading or not using a new package might present themselves. Often, the amount of packages and work that is need to upgrade is not realized until the process has begun. This is where docker demonstrates it most valuable features. You can create a new instance based on the latest release of R and all your needed packages without having to change any of your current settings. In order to use these notebooks supplied here you need to have: R installed on your computer and a list of packages. (including BiocManager, BiomaRt, gprofiler2, GSA) Each notebook in this set will check for the required packages and install them if they are missing so at the base level you need to just have R installed. There are many different ways you can use and setup R. By simply installing R you can use it directly but it is highly recommended that you also install and use RStudio which is an Integrate development environment (IDE) for R. You cannot just download RStudio and use it. It requires an installation of R. You don’t need to install R and RStudio though. You can also use R and RStudio through docker. I highly recommend using docker instead 3.2 Docker [Optional] Changing versions and environments are a continuing struggle with bioinformatics pipelines and computational pipelines in general. An analysis written and performed a year ago might not run or produce the same results when it is run today. Recording package and system versions or not updating certain packages rarely work in the long run. One the best solutions to reproducibility issues is containing your workflow or pipeline in its own coding environment where everything from the operating system, programs and packages are defined and can be built from a set of given instructions. There are many systems that offer this type of control including: Docker. Singularity “A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another.” (“What Is a Container?” n.d.) Why are containers great for Bioiformatics? allows you to create environments to run bioinformatis pipelines. create a consistent environment to use for your pipelines. test modifications to the pipeline without disrupting your current set up. Coming back to an analysis years later and there is no need to install older versions of packages or programming languages. Simply create a container and re-run. 3.3 Install Docker Download and install docker desktop. Follow slightly different instructions for Windows or MacOS/Linux 3.3.1 Windows it might prompt you to install additional updates (for example - https://docs.Microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package) and require multiple restarts of your system or docker. launch docker desktop app. Open windows Power shell navigate to directory on your system where you plan on keeping all your code. For example: C:\\USERS\\risserlin\\cbw_workshop_code Run the following command: (the only difference with the windows command is the way the current directory is written. ${PWD} instead of \"$(pwd)\") docker run -e PASSWORD=changeit --rm \\ -v ${PWD}:/home/rstudio/projects -p 8787:8787 \\ risserlin/workshop_base_image Windows defender firewall might pop up with warning. Click on Allow access. In docker desktop you see all containers you are running and easily manage them. 3.3.2 MacOS / Linux Open Terminal navigate to directory on your system where you plan on keeping all your code. For example: /Users/risserlin/bcb420_code Run the following command: (the only difference with the windows command is the way the current directory is written. ${PWD} instead of \"$(pwd)\") docker run -e PASSWORD=changeit --rm \\ -v &quot;$(pwd)&quot;:/home/rstudio/projects -p 8787:8787 \\ --add-host &quot;localhost:My.IP.address&quot; risserlin/workshop_base_image References "],["run-gprofiler-from-r.html", "Chapter 4 Run g:profiler from R 4.1 Run g:profiler with supplied genesets 4.2 Create an output file of the results - Generic enrichment Map file from g:profiler gmt 4.3 Run g:profiler with your own genesets 4.4 Upload the gmt file to gprofiler 4.5 Create enrichment Results files 4.6 Create an output file of the results - Generic enrichment Map file from Baderlab gmt", " Chapter 4 Run g:profiler from R Detailed instructions on how to run g:Profiler programmatically from R The parameters are set in the params option on this notebook but you can also manually set them here. # for example - working_dir &lt;- &quot;./genereated_data&quot; working_dir &lt;- params$working_dir data_dir &lt;- params$data_dir # for example - species &lt;- &quot;horse&quot; genelist_file &lt;- params$genelist_file # max size of the genesets for example - 350 max_gs_size &lt;- params$max_gs_size # max size of the genesets for example - 3 min_gs_size &lt;- params$min_gs_size #min intersection between your genelist and the geneset - for example 3 min_intersection &lt;- params$min_intersection # organism parameter used for g:profiler. First letter of first word in species name followed by # the second word # for example - hsapiens organism &lt;- params$organism #use library tryCatch(expr = { library(&quot;gprofiler2&quot;)}, error = function(e) { install.packages(&quot;gprofiler2&quot;)}, finally = library(&quot;gprofiler2&quot;)) tryCatch(expr = { library(&quot;GSA&quot;)}, error = function(e) { install.packages(&quot;GSA&quot;)}, finally = library(&quot;GSA&quot;)) Create or set a directory to store all the generatd results if(!dir.exists(params$working_dir)){ dir.create(params$working_dir) } Load in the set of genes that we will be running g:profiler with #load in the file current_genelist &lt;- read.table(file = file.path(data_dir, genelist_file), header = FALSE, sep = &quot;\\t&quot;, quote = &quot;&quot;, stringsAsFactors = FALSE) query_set &lt;- current_genelist$V1 With regards to pathway sets there are two options when using g:Profiler - Use the genesets that are supplied by g:Profiler Upload your own genesets. The most common reasons for supplying your own genesets is the ability to use up to date annotations or in-house annotations that might not be available in the public sphere yet. One of the greatest features of g:Profiler is that it is updated on a regular basis and most of the previous versions are available online ont the gprofiler archive. The gprofielr2 -g:Profiler R implementation is a wrapper for the web version. You require an internet connection to get enrichment results. 4.1 Run g:profiler with supplied genesets For detailed descriptions of all the parameters that can be specified for the gost g:profiler function see -here For this query we are specifying - query - the set of genes of interest, as loaded in from the Supplementary_Table1_Cancer_drivers.txt file. significant - set to FALSE because we want g:Profiler to return all the results not just the ones that it deems significant by its perdetermined threshold. ordered_query - set to TRUE because for this set of genes they are ordered in order of their significance correction_method - set to fdr. by default g:Profiler uses g:Scs organism - set to “hsapiens” for homo sapiens. Organism names are constructed by concatenating the first letter of the name and the family name (according to gprofiler2 documentation) source - the geneset source databases to use for the analysis. We recommend using GO biological process (GO:BP), WikiPathways (WP) and Reactome (Reac) but there are additional sources you can add (GO molecular function or cellular component(GO:MF, GO:CC), KEGG, transcription factors (TF), microRNA targets (MIRNA), corum complexes (CORUM), Human protein atlas (HPA),Human phenotype ontology (HP) ) gprofiler_results &lt;- gost(query = query_set , significant=FALSE, ordered_query = TRUE, exclude_iea=FALSE, correction_method = &quot;fdr&quot;, organism = organism, source = c(&quot;REAC&quot;,&quot;WP&quot;,&quot;GO:BP&quot;)) #get the gprofiler results table enrichment_results &lt;- gprofiler_results$result enrichment_results[1:5,] ## query significant p_value term_size query_size intersection_size ## 1 query_1 TRUE 1.426353e-37 5653 121 103 ## 2 query_1 TRUE 3.391992e-36 5882 121 103 ## 3 query_1 TRUE 7.172333e-36 3097 121 81 ## 4 query_1 TRUE 2.511953e-35 5724 121 101 ## 5 query_1 TRUE 7.298888e-35 3540 121 84 ## precision recall term_id source ## 1 0.8512397 0.01822041 GO:0031323 GO:BP ## 2 0.8512397 0.01751105 GO:0080090 GO:BP ## 3 0.6694215 0.02615434 GO:0031325 GO:BP ## 4 0.8347107 0.01764500 GO:0051171 GO:BP ## 5 0.6942149 0.02372881 GO:0010604 GO:BP ## term_name effective_domain_size ## 1 regulation of cellular metabolic process 21128 ## 2 regulation of primary metabolic process 21128 ## 3 positive regulation of cellular metabolic process 21128 ## 4 regulation of nitrogen compound metabolic process 21128 ## 5 positive regulation of macromolecule metabolic process 21128 ## source_order parents ## 1 7549 GO:0019222, GO:0044237, GO:0050794 ## 2 18924 GO:0019222, GO:0044238 ## 3 7551 GO:0009893, GO:0031323, GO:0044237, GO:0048522 ## 4 14399 GO:0006807, GO:0019222 ## 5 4369 GO:0009893, GO:0043170, GO:0060255 Filter the table to include just the columns that are required for the generic enrichment map file results GEM. Restrict the results to just the ones that have at least min_gs_size and less than max_gs_size terms and min_intersection size include only the term_id, term_name, p_value (and p_value again because the p_value is actually the corrected p-value. The output file does not contain the nominal p_value. For down stream analysis though it is expected to have both a p-value and a q-value so just duplicate the q-value as both p-value and q-value) # filer by params defined above enrichment_results &lt;- subset(enrichment_results,term_size &gt;= min_gs_size &amp; term_size &lt;= max_gs_size &amp; intersection_size &gt;= min_intersection , select = c(term_id,term_name,p_value,p_value )) In order to create a proper Generic enrichment results file we will need a copy of the gmt file used by g:Profiler. (also to create an Enrichment map). Download the gmt file used for this analysis from g:profiler #the link to the gmt file is static no matter what version gprofiler_gmt_url &lt;- &quot;https://biit.cs.ut.ee/gprofiler//static/gprofiler_full_hsapiens.name.gmt&quot; #get version info gprofiler as the gmt file is always associated with a specific version of g:profiler gprofiler_version &lt;- get_version_info(organism=organism) gprofiler_gmt_filename &lt;- file.path(working_dir, paste(&quot;gprofiler_full&quot;, organism, gprofiler_version$gprofiler_version,sep=&quot;_&quot;, &quot;.name.gmt&quot;)) download.file(url = gprofiler_gmt_url, destfile = gprofiler_gmt_filename) #load in the g:profiler geneset file capt_output &lt;- capture.output(genesets_gprofiler &lt;- GSA.read.gmt(filename = gprofiler_gmt_filename)) names(genesets_gprofiler$genesets) &lt;- genesets_gprofiler$geneset.names # Given: # query_genes - genes used for enrichment analysis (or as query) # # returns - the genes that overlap with the query set and part of the given # genesets getGenesetGenes &lt;- function(query_genes, subset_genesets){ genes &lt;- lapply(subset_genesets,FUN=function(x){intersect(x,query_genes)}) # For each of the genes collapse to the comma separate text genes_collapsed &lt;- unlist(lapply(genes,FUN=function(x){paste(x,collapse = &quot;,&quot;)})) genes_collapsed_df &lt;- data.frame(term_id = names(genes), genes = genes_collapsed,stringsAsFactors = FALSE) return(genes_collapsed_df) } 4.2 Create an output file of the results - Generic enrichment Map file from g:profiler gmt The file requires - name description p-value q-value phenotyp list of genes (overlap of query set and original geneset) The list of genes needs to be calculated using the gmt file and original query set. For each geneset found in the result find the overlap between the set of genes that are a part of the geneset and the query set. if(nrow(enrichment_results) &gt;0){ #add phenotype to the results enrichment_results &lt;- cbind(enrichment_results,1) # Add the genes to the genesets subset_genesets &lt;- genesets_gprofiler$genesets[which(genesets_gprofiler$geneset.names %in% enrichment_results$term_id)] genes &lt;- getGenesetGenes(query_set, subset_genesets) enrichment_results &lt;- merge(enrichment_results,genes,by.x=1, by.y=1) colnames(enrichment_results) &lt;- c(&quot;name&quot;,&quot;description&quot;,&quot;p-value&quot;,&quot;q-value&quot;,&quot;phenotype&quot;,&quot;genes&quot;) } #output the enrichment map file write.table(enrichment_results, file = file.path(working_dir, &quot;gprofiler_GEM_using_gprof_gmt.txt&quot;), row.names = FALSE, col.names = TRUE,quote = FALSE) 4.3 Run g:profiler with your own genesets Download the latest Bader lab genesets 4.4 Upload the gmt file to gprofiler In order to use your own genesets with g:Profiler you need to upload the the file to their server first. The function will return an ID that you need to specify in the organism parameter of the g:Profiler gost function call. custom_gmt &lt;- upload_GMT_file(gmtfile=dest_gmt_file) ## Your custom annotations ID is gp__IEDE_q3WW_hLY ## You can use this ID as an &#39;organism&#39; name in all the related enrichment tests against this custom source. ## Just use: gost(my_genes, organism = &#39;gp__IEDE_q3WW_hLY&#39;) For this query we are specifying - query - the set of genes of interest, as loaded in from the Supplementary_Table1_Cancer_drivers.txt file. significant - set to FALSE because we want g:Profiler to return all the results not just the ones that it deems significant by its perdetermined threshold. ordered_query - set to TRUE because for this set of genes they are ordered in order of their significance correction_method - set to fdr. by default g:Profiler uses g:Scs organism - set to the custom_gmt ID ( for this run it is - gp__IEDE_q3WW_hLY) that we received when we uploaded our genetset file. gprofiler_results_custom &lt;- gost(query = query_set , significant=FALSE, ordered_query = TRUE, exclude_iea=FALSE, correction_method = &quot;fdr&quot;, organism = custom_gmt ) ## Detected custom GMT source request #get the gprofiler results table enrichment_results_customgmt &lt;- gprofiler_results_custom$result enrichment_results_customgmt[1:5,] ## query significant p_value term_size query_size intersection_size ## 1 query_1 TRUE 6.730012e-37 4645 110 94 ## 2 query_1 TRUE 2.579228e-35 4747 110 93 ## 3 query_1 TRUE 2.579228e-35 4881 110 94 ## 4 query_1 TRUE 4.280880e-34 5230 110 95 ## 5 query_1 TRUE 2.069151e-33 3435 110 81 ## precision recall ## 1 0.8545455 0.02023681 ## 2 0.8454545 0.01959132 ## 3 0.8545455 0.01925835 ## 4 0.8636364 0.01816444 ## 5 0.7363636 0.02358079 ## term_id ## 1 REGULATION OF CELLULAR METABOLIC PROCESS%GOBP%GO:0031323 ## 2 REGULATION OF NITROGEN COMPOUND METABOLIC PROCESS%GOBP%GO:0051171 ## 3 REGULATION OF PRIMARY METABOLIC PROCESS%GOBP%GO:0080090 ## 4 REGULATION OF MACROMOLECULE METABOLIC PROCESS%GOBP%GO:0060255 ## 5 REGULATION OF NUCLEOBASE-CONTAINING COMPOUND METABOLIC PROCESS%GOBP%GO:0019219 ## source ## 1 Human_GOBP_AllPathways_no_GO_iea_April_02_2023_symbol ## 2 Human_GOBP_AllPathways_no_GO_iea_April_02_2023_symbol ## 3 Human_GOBP_AllPathways_no_GO_iea_April_02_2023_symbol ## 4 Human_GOBP_AllPathways_no_GO_iea_April_02_2023_symbol ## 5 Human_GOBP_AllPathways_no_GO_iea_April_02_2023_symbol ## term_name ## 1 regulation of cellular metabolic process ## 2 regulation of nitrogen compound metabolic process ## 3 regulation of primary metabolic process ## 4 regulation of macromolecule metabolic process ## 5 regulation of nucleobase-containing compound metabolic process ## effective_domain_size source_order parents ## 1 18525 18677 NULL ## 2 18525 11634 NULL ## 3 18525 11073 NULL ## 4 18525 10657 NULL ## 5 18525 5967 NULL Filter the table to include just the columns that are required for the generic enrichment map file results GEM. Restrict the results to just the ones that have at least min_gs_size and less than max_gs_size terms and min_intersection size include only the term_id, term_name, p_value (and p_value again because the p_value is actually the corrected p-value. The output file does not contain the nominal p_value. For down stream analysis though it is expected to have both a p-value and a q-value so just duplicate the q-value as both p-value and q-value) # filer by params defined above enrichment_results_customgmt &lt;- subset(enrichment_results_customgmt, term_size &gt;= min_gs_size &amp; term_size &lt;= max_gs_size &amp; intersection_size &gt;= min_intersection , select = c(term_id,term_name,p_value,p_value )) 4.5 Create enrichment Results files In order to use our results down stream in the Enrichment map we need to generate results files that we can pass to Enrichment Map. Load in the GMT file 4.6 Create an output file of the results - Generic enrichment Map file from Baderlab gmt The file requires - name description p-value q-value phenotyp list of genes (overlap of query set and original geneset) The list of genes needs to be calculated using the gmt file and original query set. For each geneset found in the result find the overlap between the set of genes that are a part of the geneset and the query set. if(nrow(enrichment_results_customgmt) &gt;0){ #add phenotype to the results enrichment_results_customgmt &lt;- cbind(enrichment_results_customgmt,1) # Add the genes to the genesets subset_genesets &lt;- genesets_baderlab_genesets$genesets[which(genesets_baderlab_genesets$geneset.names %in% enrichment_results_customgmt$term_id)] genes &lt;- getGenesetGenes(query_set, subset_genesets) enrichment_results_customgmt &lt;- merge(enrichment_results_customgmt,genes,by.x=1, by.y=1) colnames(enrichment_results_customgmt) &lt;- c(&quot;name&quot;,&quot;description&quot;,&quot;p-value&quot;,&quot;q-value&quot;,&quot;phenotype&quot;,&quot;genes&quot;) } #output the enrichment map file write.table(enrichment_results_customgmt, file = file.path(working_dir, &quot;gprofiler_GEM_using_gprof_gmt.txt&quot;), row.names = FALSE, col.names = TRUE,quote = FALSE) "],["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],["create-gmt-file-from-ensembl.html", "Chapter 6 Create GMT file from Ensembl 6.1 Load Libraries 6.2 Set up Biomart connection 6.3 Get species GO annotations 6.4 Format results into GMT file", " Chapter 6 Create GMT file from Ensembl The Baderlab geneset download site is an updated resource for geneset files from GO, Reactome, WikiPathways, Pathbank, NetPath, HumanCyc, IOB, … many others that can be used in g:Profiler or GSEA and many other enrichment tools that support the gmt format. Unfortunately genesets are only supplied for: Human Mouse Rat Woodchuck If you are working in a different species you will need to generate your own gmt file. The best way to do this is through ensembl. Ensembl doesn’t have annotations for all the pathway databases listed above but it has annotations for most species from GO. The parameters are set in the params option on this notebook but you can also manually set them here. # for example - working_dir &lt;- &quot;./genereated_data&quot; working_dir &lt;- params$working_dir # for example - species &lt;- &quot;horse&quot; species &lt;- params$species # for example - ensembl_dataset &lt;- &quot;ecaballus_gene_ensembl&quot; ensembl_dataset &lt;- params$ensembl_dataset #use library #make sure biocManager is installed tryCatch(expr = { library(&quot;BiocManager&quot;)}, error = function(e) { install.packages(&quot;BiocManager&quot;)}, finally = library(&quot;BiocManager&quot;)) tryCatch(expr = { library(&quot;biomaRt&quot;)}, error = function(e) { BiocManager::install(&quot;biomaRt&quot;)}, finally = library(&quot;biomaRt&quot;)) 6.1 Load Libraries Create or set a directory to store all the generatd results if(!dir.exists(params$working_dir)){ dir.create(params$working_dir) } 6.2 Set up Biomart connection Connect to Biomart ensembl &lt;- useMart(&quot;ensembl&quot;,host = &quot;https://asia.ensembl.org&quot;) Figure out which dataset you want to use - for some species there might be a few datasets to choose from. Not all of the datasets have common namesa associated with them. For example, if you search for ‘yeast’ nothing will be returned but if you look for Saccharomyces or cerevisiae you will be able to find it. all_datasets &lt;- listDatasets(ensembl) #get all the datasets that match our species definition all_datasets[grep(all_datasets$description, pattern=species, ignore.case = TRUE),] ## dataset description ## 60 ecaballus_gene_ensembl Horse genes (EquCab3.0) ## 76 hcomes_gene_ensembl Tiger tail seahorse genes (H_comes_QL1_v1) ## 164 rferrumequinum_gene_ensembl Greater horseshoe bat genes (mRhiFer1_v1.p) ## version ## 60 EquCab3.0 ## 76 H_comes_QL1_v1 ## 164 mRhiFer1_v1.p If you know the ensembl dataset that you want to use you can specify it in the parameters above or grab from the above table the dataset of the species that you are interested in. ensembl = useDataset(ensembl_dataset,mart=ensembl) 6.3 Get species GO annotations Get the GO annotations for our species go_annotation &lt;- getBM(attributes = c(&quot;external_gene_name&quot;, &quot;ensembl_gene_id&quot;, &quot;ensembl_transcript_id&quot;, &quot;go_id&quot;, &quot;name_1006&quot;, &quot;namespace_1003&quot;, &quot;go_linkage_type&quot;), filters=list(biotype=&#39;protein_coding&#39;), mart=ensembl); #get just the go biological process subset ##### # Get rid of this line if you want to include all of go and not just biological process ##### go_annotation_bp &lt;- go_annotation[which( go_annotation$namespace_1003 == &quot;biological_process&quot;),] #compute the unique pathway sets go_pathway_sets &lt;- aggregate(go_annotation_bp[,1:5], by = list(go_annotation_bp$go_id), FUN = function(x){list(unique(x))}) #unlist the go descriptions go_pathway_sets$name_1006 &lt;- apply(go_pathway_sets,1,FUN=function(x){ paste(gsub(unlist(x$name_1006),pattern= &quot;\\&quot;&quot;, replacement = &quot;&quot;),collapse = &quot;&quot;)}) There are two identifiers that you can choose from in the above table * external_symbols * ensembl_ids Each of these is stored as a list in the dataframe. In order to convert it to the right format for the gmt file we need to convert the list to string of tab delimited strings. (unfortunately there is no streaightforward way to write out a dataframe’s column of lists.) go_pathway_sets[1:3,&quot;external_gene_name&quot;] ## [[1]] ## [1] &quot;MEF2A&quot; &quot;SLC25A36&quot; &quot;OPA1&quot; &quot;MGME1&quot; &quot;SLC25A33&quot; &quot;TYMP&quot; &quot;AKT3&quot; ## [8] &quot;PIF1&quot; ## ## [[2]] ## [1] &quot;GNRH1&quot; &quot;GNRH2&quot; &quot;LIN9&quot; ## ## [[3]] ## [1] &quot;ERCC6&quot; &quot;ERCC8&quot; &quot;LIG4&quot; &quot;APLF&quot; &quot;APTX&quot; &quot;XRCC1&quot; &quot;SIRT1&quot; &quot;XNDC1&quot; go_pathway_sets[1:3,&quot;ensembl_gene_id&quot;] ## [[1]] ## [1] &quot;ENSECAG00000011593&quot; &quot;ENSECAG00000010094&quot; &quot;ENSECAG00000024248&quot; ## [4] &quot;ENSECAG00000012675&quot; &quot;ENSECAG00000016862&quot; &quot;ENSECAG00000001072&quot; ## [7] &quot;ENSECAG00000019722&quot; &quot;ENSECAG00000005316&quot; ## ## [[2]] ## [1] &quot;ENSECAG00000010664&quot; &quot;ENSECAG00000039220&quot; &quot;ENSECAG00000014325&quot; ## ## [[3]] ## [1] &quot;ENSECAG00000014160&quot; &quot;ENSECAG00000018335&quot; &quot;ENSECAG00000003257&quot; ## [4] &quot;ENSECAG00000013246&quot; &quot;ENSECAG00000012674&quot; &quot;ENSECAG00000014127&quot; ## [7] &quot;ENSECAG00000013909&quot; &quot;ENSECAG00000042118&quot; 6.4 Format results into GMT file Convert column of lists to a tab delimited string of gene names go_pathway_sets$collapsed_genenames &lt;- apply(go_pathway_sets,1, FUN=function(x){ paste(gsub(unlist(x$external_gene_name),pattern= &quot;\\&quot;&quot;, replacement = &quot;&quot;),collapse = &quot;\\t&quot;) }) Convert column of lists to a tab delimited string of gene names go_pathway_sets$collapsed_ensemblids &lt;- apply(go_pathway_sets,1, FUN=function(x){ paste(gsub(unlist(x$ensembl_gene_id),pattern= &quot;\\&quot;&quot;, replacement = &quot;&quot;),collapse = &quot;\\t&quot;) }) The format of the GMT file is described https://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/Data_formats#GMT:Gene_Matrix_Transposed_file_format.28.2A.gmt.29 and consists of rows with the following Name Description tab delimited list of genes a part of this geneset Write out the gmt file with genenames gmt_file_genenames &lt;- go_pathway_sets[,c(&quot;Group.1&quot;,&quot;name_1006&quot;, &quot;collapsed_genenames&quot;)] colnames(gmt_file_genenames)[1:2] &lt;- c(&quot;name&quot;,&quot;description&quot;) gmt_genenames_filename &lt;- file.path(params$working_dir, paste(species,ensembl_dataset,&quot;GO_genesets_GN.gmt&quot;,sep = &quot;_&quot;)) write.table(x = gmt_file_genenames,file = gmt_genenames_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) Write out the gmt file with ensembl ids gmt_file_ensemblids &lt;- go_pathway_sets[,c(&quot;Group.1&quot;,&quot;name_1006&quot;, &quot;collapsed_ensemblids&quot;)] colnames(gmt_file_ensemblids)[1:2] &lt;- c(&quot;name&quot;,&quot;description&quot;) gmt_ensemblids_filename &lt;- file.path(params$working_dir, paste(species,ensembl_dataset,&quot;GO_genesets_esemblids.gmt&quot;,sep = &quot;_&quot;)) write.table(x = gmt_file_ensemblids,file = gmt_ensemblids_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
