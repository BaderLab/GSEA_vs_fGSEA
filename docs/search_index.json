[["index.html", "CBW pathways Workshops - example R notebooks Chapter 1 Index", " CBW pathways Workshops - example R notebooks Ruth Isserlin 2023-03-31 Chapter 1 Index "],["intro.html", "Chapter 2 CBW Workshop example R Notebooks", " Chapter 2 CBW Workshop example R Notebooks Do you want to run the pathways and network analysis from R instead of doing everything mannually as demonstrated in the workshop? Everything (almost!) that was discussed in the lectures and practicals can be done computationally through R. We are using the bookdown package (Xie 2023) in this Workshop R Notebooks book, which was built on top of R Markdown and knitr (Xie 2015). References "],["setup.html", "Chapter 3 Setup 3.1 Docker [Optional] 3.2 Install Docker", " Chapter 3 Setup As with many open source projects, R is a constantly evolving language with regular updates. There is a major release once a year with patch releases through out the year. Often scripts and packages will work from one release to the next (ignoring pesky warnings that a package was compiled on a previous version of R is common) but there are exceptions. Some newer packages will only work on the latest version of R so sometimes the choice of upgrading or not using a new package might present themselves. Often, the amount of packages and work that is need to upgrade is not realized until the process has begun. This is where docker demonstrates it most valuable features. You can create a new instance based on the latest release of R and all your needed packages without having to change any of your current settings. In order to use these notebooks supplied here you need to have R installed on your computer and a list of packages. Each notebook in this set will check for the required packages and install them if they are missing so at the base level you need to just have R installed. There are many different ways you can use and setup R. By simply installing R you can use it directly but it is highly recommended that you also install and use RStudio which is an Integrate development environment (IDE) for R. You cannot just download RStudio and use it. It requires an installation of R. You don’t need to install R and RStudio though. You can also use R and RStudio through docker. I highly recommend using docker instead 3.1 Docker [Optional] Changing versions and environments are a continuing struggle with bioinformatics pipelines and computational pipelines in general. An analysis written and performed a year ago might not run or produce the same results when it is run today. Recording package and system versions or not updating certain packages rarely work in the long run. One the best solutions to reproducibility issues is containing your workflow or pipeline in its own coding environment where everything from the operating system, programs and packages are defined and can be built from a set of given instructions. There are many systems that offer this type of control including: Docker. Singularity “A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another.” (“What Is a Container?” n.d.) Why are containers great for Bioiformatics? allows you to create environments to run bioinformatis pipelines. create a consistent environment to use for your pipelines. test modifications to the pipeline without disrupting your current set up. Coming back to an analysis years later and there is no need to install older versions of packages or programming languages. Simply create a container and re-run. 3.2 Install Docker Download and install docker desktop. Follow slightly different instructions for Windows or MacOS/Linux 3.2.1 Windows it might prompt you to install additional updates (for example - https://docs.Microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package) and require multiple restarts of your system or docker. launch docker desktop app. Open windows Power shell navigate to directory on your system where you plan on keeping all your code. For example: C:\\USERS\\risserlin\\cbw_workshop_code Run the following command: (the only difference with the windows command is the way the current directory is written. ${PWD} instead of \"$(pwd)\") docker run -e PASSWORD=changeit --rm \\ -v ${PWD}:/home/rstudio/projects -p 8787:8787 \\ risserlin/workshop_base_image Windows defender firewall might pop up with warning. Click on Allow access. In docker desktop you see all containers you are running and easily manage them. 3.2.2 MacOS / Linux Open Terminal navigate to directory on your system where you plan on keeping all your code. For example: /Users/risserlin/bcb420_code Run the following command: (the only difference with the windows command is the way the current directory is written. ${PWD} instead of \"$(pwd)\") docker run -e PASSWORD=changeit --rm \\ -v &quot;$(pwd)&quot;:/home/rstudio/projects -p 8787:8787 \\ --add-host &quot;localhost:My.IP.address&quot; risserlin/workshop_base_image References "],["methods.html", "Chapter 4 Methods 4.1 math example", " Chapter 4 Methods We describe our methods in this chapter. Math can be added in body using usual syntax like this 4.1 math example \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt(\\frac{p(1-p)}{n}) \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\] You can also use math in footnotes like this1. We will approximate standard error to 0.0272 where we mention \\(p = \\frac{a}{b}\\)↩︎ \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt(\\frac{p(1-p)}{n}) \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\]↩︎ "],["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],["create-gmt-file-from-ensembl.html", "Chapter 6 Create GMT file from Ensembl 6.1 Load Libraries 6.2 Set up Biomart connection 6.3 Get species GO annotations 6.4 Format results into GMT file", " Chapter 6 Create GMT file from Ensembl The Baderlab geneset download site is an updated resource for geneset files from GO, Reactome, WikiPathways, Pathbank, NetPath, HumanCyc, IOB, … many others that can be used in g:Profiler or GSEA and many other enrichment tools that support the gmt format. Unfortunately genesets are only supplied for: Human Mouse Rat Woodchuck If you are working in a different species you will need to generate your own gmt file. The best way to do this is through ensembl. Ensembl doesn’t have annotations for all the pathway databases listed above but it has annotations for most species from GO. working_dir &lt;- &quot;./genereated_data&quot; species &lt;- &quot;horse&quot; ensembl_dataset &lt;- &quot;ecaballus_gene_ensembl&quot; #use library #make sure biocManager is installed tryCatch(expr = { library(&quot;BiocManager&quot;)}, error = function(e) { install.packages(&quot;BiocManager&quot;)}, finally = library(&quot;BiocManager&quot;)) tryCatch(expr = { library(&quot;biomaRt&quot;)}, error = function(e) { BiocManager::install(&quot;biomaRt&quot;)}, finally = library(&quot;biomaRt&quot;)) 6.1 Load Libraries Create or set a directory to store all the generatd results if(!dir.exists(params$working_dir)){ dir.create(params$working_dir) } 6.2 Set up Biomart connection Connect to Biomart ensembl &lt;- useMart(&quot;ensembl&quot;,host = &quot;https://asia.ensembl.org&quot;) Figure out which dataset you want to use - for some species there might be a few datasets to choose from. Not all of the datasets have common namesa associated with them. For example, if you search for ‘yeast’ nothing will be returned but if you look for Saccharomyces or cerevisiae you will be able to find it. all_datasets &lt;- listDatasets(ensembl) #get all the datasets that match our species definition all_datasets[grep(all_datasets$description, pattern=params$species, ignore.case = TRUE),] ## dataset description ## 60 ecaballus_gene_ensembl Horse genes (EquCab3.0) ## 76 hcomes_gene_ensembl Tiger tail seahorse genes (H_comes_QL1_v1) ## 164 rferrumequinum_gene_ensembl Greater horseshoe bat genes (mRhiFer1_v1.p) ## version ## 60 EquCab3.0 ## 76 H_comes_QL1_v1 ## 164 mRhiFer1_v1.p If you know the ensembl dataset that you want to use you can specify it in the parameters above or grab from the above table the dataset of the species that you are interested in. ensembl_dataset &lt;- params$ensembl_dataset ensembl = useDataset(ensembl_dataset,mart=ensembl) 6.3 Get species GO annotations Get the GO annotations for our species go_annotation &lt;- getBM(attributes = c(&quot;external_gene_name&quot;, &quot;ensembl_gene_id&quot;, &quot;ensembl_transcript_id&quot;, &quot;go_id&quot;, &quot;name_1006&quot;, &quot;namespace_1003&quot;, &quot;go_linkage_type&quot;), filters=list(biotype=&#39;protein_coding&#39;), mart=ensembl); #get just the go biological process subset ##### # Get rid of this line if you want to include all of go and not just biological process ##### go_annotation_bp &lt;- go_annotation[which(go_annotation$namespace_1003 == &quot;biological_process&quot;),] #compute the unique pathway sets go_pathway_sets &lt;- aggregate(go_annotation_bp[,1:5], by = list(go_annotation_bp$go_id), FUN = function(x){list(unique(x))}) #unlist the go descriptions go_pathway_sets$name_1006 &lt;- apply(go_pathway_sets,1,FUN=function(x){ paste(gsub(unlist(x$name_1006),pattern= &quot;\\&quot;&quot;,replacement = &quot;&quot;),collapse = &quot;&quot;)}) There are two identifiers that you can choose from in the above table * external_symbols * ensembl_ids Each of these is stored as a list in the dataframe. In order to convert it to the right format for the gmt file we need to convert the list to string of tab delimited strings. (unfortunately there is no streaightforward way to write out a dataframe’s column of lists.) go_pathway_sets[1:3,&quot;external_gene_name&quot;] ## [[1]] ## [1] &quot;MEF2A&quot; &quot;SLC25A36&quot; &quot;OPA1&quot; &quot;MGME1&quot; &quot;SLC25A33&quot; &quot;TYMP&quot; &quot;AKT3&quot; ## [8] &quot;PIF1&quot; ## ## [[2]] ## [1] &quot;GNRH1&quot; &quot;GNRH2&quot; &quot;LIN9&quot; ## ## [[3]] ## [1] &quot;ERCC6&quot; &quot;ERCC8&quot; &quot;LIG4&quot; &quot;APLF&quot; &quot;APTX&quot; &quot;XRCC1&quot; &quot;SIRT1&quot; &quot;XNDC1&quot; go_pathway_sets[1:3,&quot;ensembl_gene_id&quot;] ## [[1]] ## [1] &quot;ENSECAG00000011593&quot; &quot;ENSECAG00000010094&quot; &quot;ENSECAG00000024248&quot; ## [4] &quot;ENSECAG00000012675&quot; &quot;ENSECAG00000016862&quot; &quot;ENSECAG00000001072&quot; ## [7] &quot;ENSECAG00000019722&quot; &quot;ENSECAG00000005316&quot; ## ## [[2]] ## [1] &quot;ENSECAG00000010664&quot; &quot;ENSECAG00000039220&quot; &quot;ENSECAG00000014325&quot; ## ## [[3]] ## [1] &quot;ENSECAG00000014160&quot; &quot;ENSECAG00000018335&quot; &quot;ENSECAG00000003257&quot; ## [4] &quot;ENSECAG00000013246&quot; &quot;ENSECAG00000012674&quot; &quot;ENSECAG00000014127&quot; ## [7] &quot;ENSECAG00000013909&quot; &quot;ENSECAG00000042118&quot; 6.4 Format results into GMT file Convert column of lists to a tab delimited string of gene names go_pathway_sets$collapsed_genenames &lt;- apply(go_pathway_sets,1,FUN=function(x){ paste(gsub(unlist(x$external_gene_name),pattern= &quot;\\&quot;&quot;,replacement = &quot;&quot;),collapse = &quot;\\t&quot;) }) Convert column of lists to a tab delimited string of gene names go_pathway_sets$collapsed_ensemblids &lt;- apply(go_pathway_sets,1,FUN=function(x){ paste(gsub(unlist(x$ensembl_gene_id),pattern= &quot;\\&quot;&quot;,replacement = &quot;&quot;),collapse = &quot;\\t&quot;) }) The format of the GMT file is described https://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/Data_formats#GMT:Gene_Matrix_Transposed_file_format.28.2A.gmt.29 and consists of rows with the following Name Description tab delimited list of genes a part of this geneset Write out the gmt file with genenames gmt_file_genenames &lt;- go_pathway_sets[,c(&quot;Group.1&quot;,&quot;name_1006&quot;,&quot;collapsed_genenames&quot;)] colnames(gmt_file_genenames)[1:2] &lt;- c(&quot;name&quot;,&quot;description&quot;) gmt_genenames_filename &lt;- file.path(params$working_dir, paste(params$species,ensembl_dataset,&quot;GO_genesets_GN.gmt&quot;,sep = &quot;_&quot;)) write.table(x = gmt_file_genenames,file = gmt_genenames_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) Write out the gmt file with ensembl ids gmt_file_ensemblids &lt;- go_pathway_sets[,c(&quot;Group.1&quot;,&quot;name_1006&quot;,&quot;collapsed_ensemblids&quot;)] colnames(gmt_file_ensemblids)[1:2] &lt;- c(&quot;name&quot;,&quot;description&quot;) gmt_ensemblids_filename &lt;- file.path(params$working_dir, paste(params$species,ensembl_dataset,&quot;GO_genesets_esemblids.gmt&quot;,sep = &quot;_&quot;)) write.table(x = gmt_file_ensemblids,file = gmt_ensemblids_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
