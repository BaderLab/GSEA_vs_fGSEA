[["index.html", "Comparison of GSEA and fGSEA Chapter 1 Index", " Comparison of GSEA and fGSEA Ruth Isserlin 2025-04-23 Chapter 1 Index "],["intro.html", "Chapter 2 Comparing GSEA and fGSEA", " Chapter 2 Comparing GSEA and fGSEA Do you want to run the pathways and network analysis from R instead of doing everything mannually? GSEA is a java application that can be run through their GUI or through the command line but is dependant on a java installation. There is no recent implementation of GSEA in R although there are many packages that perform similiar analysis. Compare enrichment results from the GSEA java application and fast running R package fGSEA. We are using the bookdown package (Xie 2024) in this Workshop R Notebooks book, which was built on top of R Markdown and knitr (Xie 2015). References Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/. ———. 2024. Bookdown: Authoring Books and Technical Documents with r Markdown. https://github.com/rstudio/bookdown. "],["run-gsea-from-within-r.html", "Chapter 3 Run GSEA from within R 3.1 Load in required libraries 3.2 Configurable Parameters 3.3 Download the latest pathway definition file 3.4 Run GSEA 3.5 Timing", " Chapter 3 Run GSEA from within R This notebook is based largely on the original notebook published with EnrichmentMap Protocol(Reimand et al. 2019) There is no package to run the original algorithm of GSEA(Subramanian et al. 2005) in R. There are many packages that have been published to imitate the process but none are recognized by The GSEA team. 3.1 Load in required libraries #install required R and bioconductor packages tryCatch(expr = { library(&quot;RCurl&quot;)}, error = function(e) { install.packages(&quot;RCurl&quot;)}, finally = library(&quot;RCurl&quot;)) 3.2 Configurable Parameters In order to run GSEA automatically through the notebook you will need to download the gsea jar from here. Specify the exact path to the gsea jar in the parameters in order to automatically compute enrichments using GSEA. If you are running this notebook using the baderlab workshop docker image then the image comes pre-installed with the gsea jar that you can use to run gsea directly in the docker. The path to the GSEA jar in the docker is - /home/rstudio/GSEA_4.3.2/gsea-cli.sh In order to run GSEA automatically you need to speciry the path to the gsea jar file. The gsea_jar needs to be the full path to the GSEA 4.3.3 directory that you downloaded from GSEA. for example /Users/johnsmith/GSEA_4.3.3/gsea-cli.sh The parameters are set manually here but if you want to run the script from the command line then you can update the notebook to pull the parameters from the command line given arguments by updating each variable below to pull the values from the paramters - for example: variable &lt;- params$parameter_name For more details see - defining and using parameters and Knitting with parameters #path to GSEA jar # defined in the paramters at top of notebook gsea_jar &lt;- params$gsea_jar Set the working directory as the directory to the directory where you downloaded all protocol files. For example /User/JohnSmith/EMProtocolFiles/data # defined in the paramters at top of notebook #directory where all the data files are found. For example - ./data/ working_dir &lt;- params$working_dir #directory where all the data files are found. For example - ./generated_data/gsea/ output_dir &lt;- params$output_dir if(!dir.exists(output_dir)){ dir.create(output_dir) } #The name to give the analysis in GSEA - for example Basal_vs_Classical analysis_name &lt;- params$analysis_name #rank file to use in GSEA analysis. #For example - TCGA-PAAD_GDC_Subtype_Moffitt_BasalvsClassical_ranks.rnk rnk_file &lt;- params$rnk_file #run_gsea - true/false # This parameter is for the compilation of the notebook. run_gsea &lt;- params$run_gsea #set the gmt file you want to use if you don&#39;t want to use the latest gmt file. # For example, if you set dest_gmt_file ==&quot;&quot; the below script will automatically # download the latest gmt file from baderlab webstie. If it is set then it # will use the file specified. dest_gmt_file = &quot;&quot; 3.3 Download the latest pathway definition file Only Human, Mouse, Rat, and Woodchuck gene set files are currently available on the baderlab downloads site. If you are working with a species other than human (and it is either rat,mouse or woodchuck) change the gmt_url below to the correct species. Check here to see all available species. To create your own GMT file using Ensembl see [Create GMT file from Ensembl] if(dest_gmt_file == &quot;&quot;){ gmt_url = &quot;http://download.baderlab.org/EM_Genesets/current_release/Human/symbol/&quot; #list all the files on the server filenames = getURL(gmt_url) tc = textConnection(filenames) contents = readLines(tc) close(tc) #get the gmt that has all the pathways and does not include terms # inferred from electronic annotations(IEA) #start with gmt file that has pathways only and GO Biological Process only. rx = gregexpr(&quot;(?&lt;=&lt;a href=\\&quot;)(.*.GOBP_AllPathways_noPFOCR_no_GO_iea.*.)(.gmt)(?=\\&quot;&gt;)&quot;, contents, perl = TRUE) gmt_file = unlist(regmatches(contents, rx)) dest_gmt_file &lt;- file.path(output_dir,gmt_file ) #check if this gmt file already exists if(!file.exists(dest_gmt_file)){ download.file( paste(gmt_url,gmt_file,sep=&quot;&quot;), destfile=dest_gmt_file ) } } 3.4 Run GSEA (GSEA)[http://software.broadinstitute.org/gsea/index.jsp] is a stand alone java program with many customizable options. It can be easily run through its integrated user interface. To make this a seemless pipeline we can run GSEA from the command line with a set of options. Any of the supplied options can be customized and there are many additional options that can be specified. For more details see (here)[http://software.broadinstitute.org/gsea/doc/GSEAUserGuideTEXT.htm#_Running_GSEA_from] In the below command the following options have been specified: rnk - path to the rank file gmx - path to the gene set definition (gmt) file collapse - true/false indicates whether the expression/rnk file needs to be collapsed from probes to gene symbols nperm - number of permutations scoring_scheme - rpt_label - name of the directory with output rnd_seed - random seed to use set_max - maximum size for individual gene sets. In GSEA interface this is set to 500 but we prefer to use a more stringent setting of 200. set_min - minimum size for individual gene sets zip_report - true/false to zip output directory out - directory where to place the result directory. start_time &lt;- Sys.time() if(run_gsea){ command &lt;- paste(&quot;&quot;,gsea_jar, &quot;GSEAPreRanked -gmx&quot;, dest_gmt_file, &quot;-rnk&quot; ,file.path(working_dir,rnk_file), &quot;-collapse false -nperm 1000 -scoring_scheme weighted&quot;, &quot;-rpt_label &quot;,analysis_name, &quot; -plot_top_x 20 -rnd_seed 12345 -set_max 500&quot;, &quot; -set_min 15 -zip_report false &quot;, &quot; -out&quot; ,output_dir, &quot; &gt; gsea_output.txt&quot;,sep=&quot; &quot;) system(command) } end_time &lt;- Sys.time() 3.5 Timing GSEA started at 2025-04-23 14:50:22.297414 GSEA finished at 2025-04-23 15:01:29.69987 GSEA total running time - end_time - start_time ## Time difference of 11.12337 mins References Reimand, Jüri, Ruth Isserlin, Veronique Voisin, Mike Kucera, Christian Tannus-Lopes, Asha Rostamianfar, Lina Wadi, et al. 2019. “Pathway Enrichment Analysis and Visualization of Omics Data Using g: Profiler, GSEA, Cytoscape and EnrichmentMap.” Nature Protocols 14 (2): 482–517. Subramanian, Aravind, Pablo Tamayo, Vamsi K Mootha, Sayan Mukherjee, Benjamin L Ebert, Michael A Gillette, Amanda Paulovich, et al. 2005. “Gene Set Enrichment Analysis: A Knowledge-Based Approach for Interpreting Genome-Wide Expression Profiles.” Proceedings of the National Academy of Sciences 102 (43): 15545–50. "],["run-fgsea-from-within-r.html", "Chapter 4 Run fGSEA from within R 4.1 Load in required libraries 4.2 function to write out fGSEA results 4.3 Configurable Parameters 4.4 Download the latest pathway definition file 4.5 Run fGSEA 4.6 Timing 4.7 Results presented as R table", " Chapter 4 Run fGSEA from within R This notebook is based largely on the original notebook published with EnrichmentMap Protocol(Reimand et al. 2019) 4.1 Load in required libraries #install required R and bioconductor packages tryCatch(expr = { library(&quot;RCurl&quot;)}, error = function(e) { install.packages(&quot;RCurl&quot;)}, finally = library(&quot;RCurl&quot;)) tryCatch(expr = { library(&quot;fgsea&quot;)}, error = function(e) { install.packages(&quot;fgsea&quot;)}, finally = library(&quot;fgsea&quot;)) tryCatch(expr = { library(&quot;GSA&quot;)}, error = function(e) { install.packages(&quot;GSA&quot;)}, finally = library(&quot;GSA&quot;)) 4.2 function to write out fGSEA results Create function to write out fgsea results files for each sample write_sample_fgsea_results&lt;- function(current_fgsea_results, current_results_dir, current_sample){ current_sample &lt;- current_sample current_sample_directory_fullpath &lt;- file.path(current_results_dir, current_sample) if(!dir.exists(current_sample_directory_fullpath)){ dir.create(current_sample_directory_fullpath) } #calculate the rank at max #fgsea returns the leading edge. Just need to extract the highest rank from # set to get the rank at max calculated_rank_at_max &lt;- apply(current_fgsea_results,1,FUN=function(x){ max(which(names(current_ranks) %in% unlist(x[8])))}) fakeenr_current_sample &lt;- cbind(current_fgsea_results$pathway, current_fgsea_results$pathway, &quot;Details&quot;, current_fgsea_results$size, current_fgsea_results$ES, current_fgsea_results$NES, current_fgsea_results$pval, current_fgsea_results$padj, 0, calculated_rank_at_max, apply(current_fgsea_results,1, FUN=function(x){paste(unlist(x[8]),collapse=&quot;,&quot;)})) colnames(fakeenr_current_sample) &lt;- c(&quot;name&quot;,&quot;description&quot;,&quot;GS details&quot;,&quot;SIZE&quot;,&quot;ES&quot;,&quot;NES&quot;,&quot;pval&quot;,&quot;padj&quot;,&quot;FWER&quot;,&quot;Rank at Max&quot;,&quot;leading edge genes&quot;) fakeenr_filename &lt;- paste0(current_sample, &quot;_fgsea_enr_results.txt&quot;,sep=&quot;&quot;) fakeenr_filename_docker &lt;- file.path(current_sample_directory_fullpath,fakeenr_filename) write.table(fakeenr_current_sample , fakeenr_filename_docker, col.name=TRUE,sep=&quot;\\t&quot;,row.names=FALSE,quote=FALSE,fileEncoding=&quot;latin1&quot;) # &quot;upload&quot; the files to the host machine and replace each path with the host machine path #create a fake expression file fakeexp &lt;- data.frame(name = names(current_ranks), description = names(current_ranks),current_ranks) fakeexp_filename &lt;- paste0(current_sample,&quot;fakeexpression.txt&quot;,sep=&quot;&quot;) fakeexp_name_docker &lt;- file.path( current_sample_directory_fullpath,fakeexp_filename) write.table(fakeexp, fakeexp_name_docker, col.name=TRUE,sep=&quot;\\t&quot;,row.names=FALSE,quote=FALSE,fileEncoding=&quot;&quot;) #create a rank expression file fakernk &lt;- data.frame(name = names(current_ranks), current_ranks) fakernk_filename &lt;- paste0(current_sample,&quot;fakeranks.rnk&quot;,sep=&quot;&quot;) fakernk_name_docker &lt;- file.path( current_sample_directory_fullpath,fakernk_filename) write.table(fakernk, fakernk_name_docker, col.name=TRUE,sep=&quot;\\t&quot;,row.names=FALSE,quote=FALSE,fileEncoding=&quot;&quot;) } 4.3 Configurable Parameters Set the working directory as the directory to the directory where you downloaded all protocol files. For example /User/JohnSmith/EMProtocolFiles/data # defined in the paramters at top of notebook #directory where all the data files are found. For example - ./data/ working_dir &lt;- params$working_dir #directory where all the data files are found. For example - ./generated_data/gsea/ output_dir &lt;- params$output_dir if(!exists(output_dir)){ dir.create(output_dir) } #The name to give the analysis in GSEA - for example Basal_vs_Classical analysis_name &lt;- params$analysis_name #rank file to use in GSEA analysis. #For example - TCGA-PAAD_GDC_Subtype_Moffitt_BasalvsClassical_ranks.rnk rnk_file &lt;- params$rnk_file #run_gsea - true/false # This parameter is for the compilation of the notebook. run_fgsea &lt;- params$run_fgsea #set the gmt file you want to use if you don&#39;t want to use the latest gmt file. # For example, if you set dest_gmt_file ==&quot;&quot; the below script will automatically # download the latest gmt file from baderlab webstie. If it is set then it # will use the file specified. dest_gmt_file = &quot;&quot; 4.4 Download the latest pathway definition file Only Human, Mouse, Rat, and Woodchuck gene set files are currently available on the baderlab downloads site. If you are working with a species other than human (and it is either rat,mouse or woodchuck) change the gmt_url below to the correct species. Check here to see all available species. To create your own GMT file using Ensembl see [Create GMT file from Ensembl] if(dest_gmt_file == &quot;&quot;){ gmt_url = &quot;http://download.baderlab.org/EM_Genesets/current_release/Human/symbol/&quot; #list all the files on the server filenames = getURL(gmt_url) tc = textConnection(filenames) contents = readLines(tc) close(tc) #get the gmt that has all the pathways and does not include terms # inferred from electronic annotations(IEA) #start with gmt file that has pathways only and GO Biological Process only. rx = gregexpr(&quot;(?&lt;=&lt;a href=\\&quot;)(.*.GOBP_AllPathways_noPFOCR_no_GO_iea.*.)(.gmt)(?=\\&quot;&gt;)&quot;, contents, perl = TRUE) gmt_file = unlist(regmatches(contents, rx)) dest_gmt_file &lt;- file.path(output_dir,gmt_file ) #check if this gmt file already exists if(!file.exists(dest_gmt_file)){ download.file( paste(gmt_url,gmt_file,sep=&quot;&quot;), destfile=dest_gmt_file ) } } #load in the genesets. capture.output(all_gs &lt;- GSA.read.gmt(dest_gmt_file) ,file=&quot;gsa_load.out&quot;) names(all_gs$genesets) &lt;- all_gs$geneset.names 4.5 Run fGSEA (fGSEA)[https://bioconductor.org/packages/release/bioc/html/fgsea.html] is an R package that runs a fast Gene Set Enrichment Analysis. In the below command the following options have been specified: pathways - list of genesets to use for the calculation stats - genes and their associated statistic, sorted max_size - maximum size for individual gene sets. In GSEA interface this is set to 500 but we prefer to use a more stringent setting of 200. min_size - minimum size for individual gene sets start_time &lt;- Sys.time() if(run_fgsea){ #get the subset of genes that are protein coding. current_ranks &lt;- read.table(file.path(working_dir,rnk_file),header=TRUE,sep = &quot;\\t&quot;) fgsea_ranks &lt;- current_ranks[,2] names(fgsea_ranks) &lt;- current_ranks[,1] current_ranks &lt;- fgsea_ranks #remove duplicated genes duplicated_gene_names &lt;- names(current_ranks)[which(duplicated(names(current_ranks)))] current_ranks &lt;- current_ranks[which(!names(current_ranks) %in% duplicated_gene_names)] current_ranks &lt;- sort(current_ranks,decreasing = TRUE) set.seed(42) current_fgsea_results &lt;- fgsea::fgsea(all_gs$genesets, sort(current_ranks,decreasing=TRUE), minSize=15, maxSize = 500 ) #write out the fgsea results for this patient write_sample_fgsea_results(current_fgsea_results,output_dir,analysis_name) } ## Warning in write.table(fakeenr_current_sample, fakeenr_filename_docker, : ## invalid char string in output conversion ## Warning in write.table(fakeenr_current_sample, fakeenr_filename_docker, : ## invalid char string in output conversion ## Warning in write.table(fakeenr_current_sample, fakeenr_filename_docker, : ## invalid char string in output conversion ## Warning in write.table(fakeenr_current_sample, fakeenr_filename_docker, : ## invalid char string in output conversion end_time &lt;- Sys.time() 4.6 Timing fGSEA started at 2025-04-23 15:01:51.841727 fGSEA finished at 2025-04-23 15:02:09.713789 fGSEA total running time - end_time - start_time ## Time difference of 17.87206 secs 4.7 Results presented as R table topPathwaysUp &lt;- current_fgsea_results[ES &gt; 0][head(order(pval), n=10), pathway] topPathwaysDown &lt;- current_fgsea_results[ES &lt; 0][head(order(pval), n=10), pathway] topPathways &lt;- c(topPathwaysUp, rev(topPathwaysDown)) plotGseaTable(all_gs$genesets[topPathways], current_ranks, current_fgsea_results, gseaParam=0.5) References Reimand, Jüri, Ruth Isserlin, Veronique Voisin, Mike Kucera, Christian Tannus-Lopes, Asha Rostamianfar, Lina Wadi, et al. 2019. “Pathway Enrichment Analysis and Visualization of Omics Data Using g: Profiler, GSEA, Cytoscape and EnrichmentMap.” Nature Protocols 14 (2): 482–517. "],["create-enrichment-map-from-r-with-gsea-results.html", "Chapter 5 Create Enrichment map from R with GSEA results 5.1 Initialize variables and libraries 5.2 Configurable Parameters 5.3 Specify Data files 5.4 Optional File specification 5.5 Launch Cytoscape 5.6 Make sure you can connect to Cytoscape 5.7 Create an Enrichment map 5.8 Create an Enrichment map - run EM command 5.9 Get a screen shot of the initial network.", " Chapter 5 Create Enrichment map from R with GSEA results 5.1 Initialize variables and libraries #use library #make sure biocManager is installed tryCatch(expr = { library(&quot;BiocManager&quot;)}, error = function(e) { install.packages(&quot;BiocManager&quot;)}, finally = library(&quot;BiocManager&quot;)) ## Bioconductor version &#39;3.19&#39; is out-of-date; the current release version &#39;3.21&#39; ## is available with R version &#39;4.5&#39;; see https://bioconductor.org/install tryCatch(expr = { library(&quot;ggplot2&quot;)}, error = function(e) { install.packages(&quot;ggplot2&quot;)}, finally = library(&quot;ggplot2&quot;)) #use easy cyRest library to communicate with cytoscape. tryCatch(expr = { library(&quot;RCy3&quot;)}, error = function(e) { BiocManager::install(&quot;RCy3&quot;)}, finally = library(&quot;RCy3&quot;)) tryCatch(expr = { library(&quot;httr&quot;)}, error = function(e) { BiocManager::install(&quot;httr&quot;)}, finally = library(&quot;httr&quot;)) 5.2 Configurable Parameters # is_docker - true/false depending on if you are running R from docker is_docker &lt;- TRUE #directory where all the original input data file are # for example ./data/ working_dir &lt;- params$working_dir #directory where all the generated data files are found. # For example - ./generated_data/ # If you are using all the notebooks from this set the generated data will be # put in the ./generated_data folder. You have to specify if it is gsea or # gprofiler output_dir &lt;- params$output_dir #defined threshold for GSEA enrichments #p-value to filter all the genesets. For example - 1.0 pvalue_gsea_threshold &lt;- params$pvalue_thresh #q-value to filter all the genesets. For example - 0.05 qvalue_gsea_threshold &lt;- params$qvalue_thresh #similarity threshold to filter all the genesets connections/edges. # For example - 0.375 similarity_threshold &lt;- &quot;0.375&quot; #similarity metric to filter all the genesets connections/edges # (can be OVERLAP, JACCARD, or COMBINED. For example - Combined similarity_metric = &quot;COMBINED&quot; 5.3 Specify Data files Depending on whether you are creating your enrichment map from g:Profiler or GSEA results the sets of files might be a little different. Minimally, you will need to specify: * gmt file * enrichment results file Although there is a gmt file in the gsea edb results directory(which is the easiest method to create an enrichment map) it have been filtered to contain only genes represented in the expression set. If you use this fltered file you will get different pathway connectivity depending on the dataset being used. We recommend using original gmt file used for the gsea analysis and not the filtered one in the results directory. #use the newest gmt file in the output directory gmt_files &lt;- list.files(path = output_dir, pattern = &quot;\\\\.gmt&quot;) #get the details on the files details = file.info(file.path(output_dir,gmt_files)) #order according to newest to oldest details = details[with(details, order(as.POSIXct(mtime),decreasing = TRUE)), ] #use the newest file: gmt_gsea_file &lt;- row.names(details)[1] GSEA output directory - You can specify the exact name of the directory. The below code looks for the newest GSEA results directory and uses that. gsea_directories &lt;- list.files(path = output_dir, pattern = &quot;\\\\.GseaPreranked&quot;) #get the details on the files details = file.info(file.path(output_dir,gsea_directories)) #order according to newest to oldest details = details[with(details, order(as.POSIXct(mtime),decreasing = TRUE)), ] #use the newest file: gsea_output_dir &lt;- row.names(details)[1] gsea_results_path &lt;- file.path(gsea_output_dir,&quot;edb&quot;) gsea_results_filename &lt;- file.path(gsea_results_path,&quot;results.edb&quot;) 5.4 Optional File specification These files are not needed to create the enrichment map but are very beneficial when analyzing your result. * gene expression file * gene ranks file gsea_ranks_file &lt;- file.path(gsea_results_path, list.files(gsea_results_path,pattern=&quot;.rnk&quot;)) expression_file_fullpath &lt;- file.path(working_dir, params$expression_file) cls_file_fullpath &lt;- file.path(working_dir, params$cls_file) #define an analysis name cur_model_name &lt;- params$analysis_name 5.5 Launch Cytoscape Launch Cytoscape (by default cytoscape will automatically enable rest so as long as cytoscape 3.3 or higher is open R should be able to communicate with it). Make sure if you get an message asking you if you want communicate with other apps that you select “Allow”. 5.6 Make sure you can connect to Cytoscape if(is_docker){ current_base = &quot;host.docker.internal:1234/v1&quot; .defaultBaseUrl &lt;- &quot;http://host.docker.internal:1234/v1&quot; } else{ current_base = &quot;localhost:1234/v1&quot; } cytoscapePing (base.url = current_base) ## You are connected to Cytoscape! cytoscapeVersionInfo (base.url = current_base) ## apiVersion cytoscapeVersion ## &quot;v1&quot; &quot;3.10.3&quot; 5.7 Create an Enrichment map If you are running R from within a docker you need to first upload your datafiles to Cytoscape before you can create your enrichment map #if using docker we need to replace all the the paths to the host path if(is_docker) { upload_em_file &lt;- function(localPath) { bname &lt;- basename(localPath) r &lt;- POST( url = paste(&#39;http://host.docker.internal:1234/enrichmentmap/textfileupload?fileName=&#39;, bname, sep=&quot;&quot;), config = list(), body = list(file = upload_file(localPath)), encode = &quot;multipart&quot;, handle = NULL ) content(r,&quot;parsed&quot;)$path } # &quot;upload&quot; the files to the host machine and replace each path # with the host machine path expression_file_fullpath &lt;- upload_em_file(expression_file_fullpath) class_file_fullpath &lt;- upload_em_file(cls_file_fullpath) gmt_gsea_file &lt;- upload_em_file(gmt_gsea_file) gsea_ranks_file &lt;- upload_em_file(gsea_ranks_file) gsea_results_filename &lt;- upload_em_file(gsea_results_filename) } 5.8 Create an Enrichment map - run EM command ####################################### #create EM current_network_name &lt;- paste(cur_model_name,pvalue_gsea_threshold, qvalue_gsea_threshold,sep=&quot;_&quot;) em_command = paste(&#39;enrichmentmap build analysisType=&quot;gsea&quot; gmtFile=&#39;, gmt_gsea_file, &#39;pvalue=&#39;,pvalue_gsea_threshold, &#39;qvalue=&#39;,qvalue_gsea_threshold, &#39;similaritycutoff=&#39;,similarity_threshold, &#39;coefficients=&#39;,similarity_metric, &#39;ranksDataset1=&#39;, gsea_ranks_file, &#39;enrichmentsDataset1=&#39;,gsea_results_filename, &#39;filterByExpressions=false&#39;, &#39;expressionDataset1=&#39;,expression_file_fullpath, &#39;classDataset1=&#39;,class_file_fullpath, &#39;gmtFile=&#39;,gmt_gsea_file, sep=&quot; &quot;) #enrichment map command will return the suid of newly created network. response &lt;- commandsGET(em_command,base.url = current_base) current_network_suid &lt;- 0 #enrichment map command will return the suid of newly created network # unless it Failed. If it failed it will contain the word failed if(grepl(pattern=&quot;Failed&quot;, response)){ paste(response) } else { current_network_suid &lt;- response } #check to see if the network name is unique current_names &lt;- getNetworkList(base.url = current_base) if(current_network_name %in% current_names){ #if the name already exists in the network names then put the SUID in front # of the name (this does not work if you put the suid at the end of the name) current_network_name &lt;- paste(current_network_suid, current_network_name,sep=&quot;_&quot;) } response &lt;- renameNetwork(title=current_network_name, network = as.numeric(current_network_suid), base.url = current_base) 5.9 Get a screen shot of the initial network. #you can only output the file if it isn&#39;t on docker #on docker is put it into the user&#39;s home directory with docker # has not access to if(!is_docker){ output_network_file &lt;- file.path(getwd(),&quot;initial_screenshot_network.png&quot;) output_network_file_current &lt;- output_network_file fitContent() if(file.exists(output_network_file)){ #cytoscape hangs waiting for user response if file already exists. # Remove it first response &lt;- file.remove(output_network_file) } response &lt;- exportImage(output_network_file, type = &quot;png&quot;, base.url = current_base) } "],["create-enrichment-map-from-r-with-gsea-results-1.html", "Chapter 6 Create Enrichment map from R with GSEA results 6.1 Initialize variables and libraries 6.2 Configurable Parameters 6.3 Specify Data files 6.4 Optional File specification 6.5 Launch Cytoscape 6.6 Make sure you can connect to Cytoscape 6.7 Create an Enrichment map 6.8 Create an Enrichment map - run EM command 6.9 Get a screen shot of the initial network.", " Chapter 6 Create Enrichment map from R with GSEA results 6.1 Initialize variables and libraries #use library #make sure biocManager is installed tryCatch(expr = { library(&quot;BiocManager&quot;)}, error = function(e) { install.packages(&quot;BiocManager&quot;)}, finally = library(&quot;BiocManager&quot;)) ## Bioconductor version &#39;3.19&#39; is out-of-date; the current release version &#39;3.21&#39; ## is available with R version &#39;4.5&#39;; see https://bioconductor.org/install tryCatch(expr = { library(&quot;ggplot2&quot;)}, error = function(e) { install.packages(&quot;ggplot2&quot;)}, finally = library(&quot;ggplot2&quot;)) #use easy cyRest library to communicate with cytoscape. tryCatch(expr = { library(&quot;RCy3&quot;)}, error = function(e) { BiocManager::install(&quot;RCy3&quot;)}, finally = library(&quot;RCy3&quot;)) tryCatch(expr = { library(&quot;httr&quot;)}, error = function(e) { BiocManager::install(&quot;httr&quot;)}, finally = library(&quot;httr&quot;)) 6.2 Configurable Parameters # is_docker - true/false depending on if you are running R from docker is_docker &lt;- TRUE #directory where all the original input data file are # for example ./data/ working_dir &lt;- params$working_dir #directory where all the generated data files are found. # For example - ./generated_data/ # If you are using all the notebooks from this set the generated data will be # put in the ./generated_data folder. You have to specify if it is gsea or # gprofiler output_dir &lt;- params$output_dir #defined threshold for GSEA enrichments #p-value to filter all the genesets. For example - 1.0 pvalue_gsea_threshold &lt;- params$pvalue_thresh #q-value to filter all the genesets. For example - 0.05 qvalue_gsea_threshold &lt;- params$qvalue_thresh #similarity threshold to filter all the genesets connections/edges. # For example - 0.375 similarity_threshold &lt;- &quot;0.375&quot; #similarity metric to filter all the genesets connections/edges # (can be OVERLAP, JACCARD, or COMBINED. For example - Combined similarity_metric = &quot;COMBINED&quot; 6.3 Specify Data files Depending on whether you are creating your enrichment map from g:Profiler or GSEA results the sets of files might be a little different. Minimally, you will need to specify: * gmt file * enrichment results file Although there is a gmt file in the gsea edb results directory(which is the easiest method to create an enrichment map) it have been filtered to contain only genes represented in the expression set. If you use this fltered file you will get different pathway connectivity depending on the dataset being used. We recommend using original gmt file used for the gsea analysis and not the filtered one in the results directory. #use the newest gmt file in the output directory gmt_files &lt;- list.files(path = output_dir, pattern = &quot;\\\\.gmt&quot;) #get the details on the files details = file.info(file.path(output_dir,gmt_files)) #order according to newest to oldest details = details[with(details, order(as.POSIXct(mtime),decreasing = TRUE)), ] #use the newest file: gmt_gsea_file &lt;- row.names(details)[1] fGSEA output directory - You can specify the exact name of the directory. The below code looks for the newest GSEA results directory and uses that. gsea_directories &lt;- list.files(path = output_dir) #get the details on the files details = file.info(file.path(output_dir,gsea_directories)) #order according to newest to oldest details = details[with(details, order(as.POSIXct(mtime),decreasing = TRUE)), ] #use the newest file: gsea_output_dir &lt;- row.names(details)[1] fgsea_results_file &lt;- list.files((gsea_output_dir),pattern = &quot;fgsea_enr_results.txt&quot;) gsea_results_path &lt;- file.path(gsea_output_dir) gsea_results_filename &lt;- file.path(gsea_output_dir,fgsea_results_file ) 6.4 Optional File specification These files are not needed to create the enrichment map but are very beneficial when analyzing your result. * gene expression file * gene ranks file gsea_ranks_file &lt;- file.path(gsea_results_path, list.files(gsea_results_path,pattern=&quot;.rnk&quot;)) expression_file_fullpath &lt;- file.path(working_dir, params$expression_file) cls_file_fullpath &lt;- file.path(working_dir, params$cls_file) #define an analysis name cur_model_name &lt;- paste(&quot;FGSEA&quot;,params$analysis_name,sep=&quot;_&quot;) 6.5 Launch Cytoscape Launch Cytoscape (by default cytoscape will automatically enable rest so as long as cytoscape 3.3 or higher is open R should be able to communicate with it). Make sure if you get an message asking you if you want communicate with other apps that you select “Allow”. 6.6 Make sure you can connect to Cytoscape if(is_docker){ current_base = &quot;host.docker.internal:1234/v1&quot; .defaultBaseUrl &lt;- &quot;http://host.docker.internal:1234/v1&quot; } else{ current_base = &quot;localhost:1234/v1&quot; } cytoscapePing (base.url = current_base) ## You are connected to Cytoscape! cytoscapeVersionInfo (base.url = current_base) ## apiVersion cytoscapeVersion ## &quot;v1&quot; &quot;3.10.3&quot; 6.7 Create an Enrichment map If you are running R from within a docker you need to first upload your datafiles to Cytoscape before you can create your enrichment map #if using docker we need to replace all the the paths to the host path if(is_docker) { upload_em_file &lt;- function(localPath) { bname &lt;- basename(localPath) r &lt;- POST( url = paste(&#39;http://host.docker.internal:1234/enrichmentmap/textfileupload?fileName=&#39;, bname, sep=&quot;&quot;), config = list(), body = list(file = upload_file(localPath)), encode = &quot;multipart&quot;, handle = NULL ) content(r,&quot;parsed&quot;)$path } # &quot;upload&quot; the files to the host machine and replace each path # with the host machine path expression_file_fullpath &lt;- upload_em_file(expression_file_fullpath) class_file_fullpath &lt;- upload_em_file(cls_file_fullpath) gmt_gsea_file &lt;- upload_em_file(gmt_gsea_file) gsea_ranks_file &lt;- upload_em_file(gsea_ranks_file) gsea_results_filename &lt;- upload_em_file(gsea_results_filename) } 6.8 Create an Enrichment map - run EM command ####################################### #create EM current_network_name &lt;- paste(cur_model_name,pvalue_gsea_threshold, qvalue_gsea_threshold,sep=&quot;_&quot;) em_command = paste(&#39;enrichmentmap build analysisType=&quot;gsea&quot; gmtFile=&#39;, gmt_gsea_file, &#39;pvalue=&#39;,pvalue_gsea_threshold, &#39;qvalue=&#39;,qvalue_gsea_threshold, &#39;similaritycutoff=&#39;,similarity_threshold, &#39;coefficients=&#39;,similarity_metric, &#39;ranksDataset1=&#39;, gsea_ranks_file, &#39;enrichmentsDataset1=&#39;,gsea_results_filename, &#39;filterByExpressions=false&#39;, &#39;expressionDataset1=&#39;,expression_file_fullpath, &#39;classDataset1=&#39;,class_file_fullpath, &#39;gmtFile=&#39;,gmt_gsea_file, sep=&quot; &quot;) #enrichment map command will return the suid of newly created network. response &lt;- commandsGET(em_command,base.url = current_base) current_network_suid &lt;- 0 #enrichment map command will return the suid of newly created network # unless it Failed. If it failed it will contain the word failed if(grepl(pattern=&quot;Failed&quot;, response)){ paste(response) } else { current_network_suid &lt;- response } #check to see if the network name is unique current_names &lt;- getNetworkList(base.url = current_base) if(current_network_name %in% current_names){ #if the name already exists in the network names then put the SUID in front # of the name (this does not work if you put the suid at the end of the name) current_network_name &lt;- paste(current_network_suid, current_network_name,sep=&quot;_&quot;) } response &lt;- renameNetwork(title=current_network_name, network = as.numeric(current_network_suid), base.url = current_base) 6.9 Get a screen shot of the initial network. #you can only output the file if it isn&#39;t on docker #on docker is put it into the user&#39;s home directory with docker # has not access to if(!is_docker){ output_network_file &lt;- file.path(getwd(),&quot;initial_screenshot_network.png&quot;) output_network_file_current &lt;- output_network_file fitContent() if(file.exists(output_network_file)){ #cytoscape hangs waiting for user response if file already exists. # Remove it first response &lt;- file.remove(output_network_file) } response &lt;- exportImage(output_network_file, type = &quot;png&quot;, base.url = current_base) } "],["references.html", "Chapter 7 References", " Chapter 7 References Reimand, Jüri, Ruth Isserlin, Veronique Voisin, Mike Kucera, Christian Tannus-Lopes, Asha Rostamianfar, Lina Wadi, et al. 2019. “Pathway Enrichment Analysis and Visualization of Omics Data Using g: Profiler, GSEA, Cytoscape and EnrichmentMap.” Nature Protocols 14 (2): 482–517. Subramanian, Aravind, Pablo Tamayo, Vamsi K Mootha, Sayan Mukherjee, Benjamin L Ebert, Michael A Gillette, Amanda Paulovich, et al. 2005. “Gene Set Enrichment Analysis: A Knowledge-Based Approach for Interpreting Genome-Wide Expression Profiles.” Proceedings of the National Academy of Sciences 102 (43): 15545–50. Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/. ———. 2024. Bookdown: Authoring Books and Technical Documents with r Markdown. https://github.com/rstudio/bookdown. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
